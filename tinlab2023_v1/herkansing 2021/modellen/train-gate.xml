<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

const int N = 5;         // # trains
typedef int[0,N-1] id_t;

chan        appr[N], stop[N], leave[N];
urgent chan go[N];
</declaration><template><name x="5" y="5">Train</name><parameter>const id_t id</parameter><declaration>// Place local declarations here.
clock x;</declaration><location id="id0" x="96" y="160"></location><location id="id1" x="192" y="96"></location><location id="id2" x="0" y="96"><label kind="invariant" x="-56" y="88">x&lt;=20</label></location><location id="id3" x="192" y="-64"></location><location id="id4" x="0" y="-64"></location><init ref="id4"/><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="144" y="136">go[id]?</label><label kind="assignment" x="144" y="152">x=0</label></transition><transition><source ref="id2"/><target ref="id0"/><label kind="guard" x="0" y="128">x&lt;=10</label><label kind="synchronisation" x="0" y="144">stop[id]?</label><nail x="32" y="120"/></transition><transition><source ref="id1"/><target ref="id3"/><label kind="guard" x="216" y="-16">x&gt;=7</label><label kind="assignment" x="224" y="8">x=0</label></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="36" y="-14">x&gt;=10</label><label kind="assignment" x="40" y="0">x=10</label></transition><transition><source ref="id4"/><target ref="id2"/><label kind="synchronisation" x="-60" y="1">appr[id]!</label><label kind="assignment" x="-60" y="16">x=0</label></transition><transition><source ref="id3"/><target ref="id4"/><label kind="guard" x="88" y="-104">x&gt;=3</label><label kind="synchronisation" x="88" y="-88">leave[id]!</label></transition></template><template><name>Gate</name><declaration>id_t list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration><location id="id5" x="416" y="384"><committed/></location><location id="id6" x="416" y="256"></location><location id="id7" x="416" y="96"></location><init ref="id7"/><transition><source ref="id5"/><target ref="id6"/><label kind="synchronisation" x="456" y="304">stop[tail()]!</label><nail x="448" y="352"/><nail x="448" y="288"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="select" x="332" y="296">e:id_t</label><label kind="synchronisation" x="336" y="313">appr[e]?</label><label kind="assignment" x="336" y="328">enqueue(e)</label></transition><transition><source ref="id6"/><target ref="id7"/><label kind="select" x="520" y="137">e:id_t</label><label kind="guard" x="520" y="152">e==front()</label><label kind="synchronisation" x="520" y="167">leave[e]?</label><label kind="assignment" x="520" y="182">dequeue()</label><nail x="512" y="256"/><nail x="512" y="96"/></transition><transition><source ref="id7"/><target ref="id6"/><label kind="guard" x="328" y="137">len&gt;1</label><label kind="synchronisation" x="328" y="152">go[front()]!</label><nail x="320" y="96"/><nail x="320" y="256"/></transition><transition><source ref="id7"/><target ref="id6"/><label kind="select" x="424" y="138">e:id_t</label><label kind="guard" x="424" y="153">len&lt;=1</label><label kind="synchronisation" x="424" y="168">appr[e]?</label><label kind="assignment" x="424" y="183">enqueue(e)</label></transition></template><template><name>Sluismeester</name><location id="id8" x="0" y="0"></location><init ref="id8"/></template><template><name>Controller</name><location id="id9" x="0" y="0"></location><init ref="id9"/></template><template><name>invul_nivelleer</name><location id="id10" x="0" y="0"></location><init ref="id10"/></template><template><name>schutsluis</name><declaration>id_t list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration><location id="id11" x="40" y="88"><name x="30" y="58">nivelleer</name></location><location id="id12" x="-128" y="104"><name x="-138" y="74">wacht_beneden</name></location><location id="id13" x="178" y="110"><name x="160" y="64">wacht_boven</name></location><location id="id14" x="0" y="0"><name x="-10" y="-30">initial</name></location><init ref="id14"/></template><template><name>stoplicht_onder</name><location id="id15" x="0" y="0"></location><init ref="id15"/></template><template><name>stoplicht_boven</name><location id="id16" x="0" y="0"></location><init ref="id16"/></template><template><name>deur_beneden</name><location id="id17" x="0" y="0"></location><init ref="id17"/></template><template><name>deur_boven</name><location id="id18" x="0" y="0"></location><init ref="id18"/></template><template><name>schip</name><parameter>const id_t id</parameter><location id="id19" x="192" y="0"><name x="182" y="-30">uitvarende</name></location><location id="id20" x="192" y="224"><name x="182" y="194">nivellerende</name></location><location id="id21" x="96" y="320"><name x="86" y="290">invarende</name></location><location id="id22" x="0" y="216"><name x="-10" y="186">wachtende</name></location><location id="id23" x="0" y="96"><name x="-10" y="66">aanvarende</name></location><location id="id24" x="0" y="0"><name x="-10" y="-30">Initial</name></location><init ref="id24"/></template><system>system Sluismeester, Controller, invul_nivelleer, schutsluis, stoplicht_onder, stoplicht_boven, deur_beneden, deur_boven, schip;</system></nta>