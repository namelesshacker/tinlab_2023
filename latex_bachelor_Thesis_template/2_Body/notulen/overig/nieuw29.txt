
chan start;

clock realtime;
//bool entrance_schip,schip_boven=true,schip_beneden=false;
bool direction = 0;
bool process_busy = false;
//bool process_finished = false;
//bool on=false, off=false;
//const int deuren = 2;
//typedef int[0,deuren-1] deur;
//bool gate_is_open[deur];
//int countCycle=0;


chan initOpenProc,initClosingProc;

//bool togglePomp = false;
//bool startDown =false;
//bool startUp= true;
bool position=0;




bool sluisToggle = false;
bool sluisIsBezig = false;
//bool lockOpen = false;
//int[-1,6] waterniveau = 0;




//typedef int[0,10] meter;
//meter waterlevel;
int[-10,10] waterlevel=0;


// identifier voor schepen
const int MAX_schepen=1;
typedef int[0,MAX_schepen-1] kenteken;
chan schipklik[kenteken];
chan register[kenteken];
chan unregister[kenteken];
//chan send[0,1],receive[0,1];

chan notified_pomp_direction;


// identifier voor wachtrij
// aantal queues voor wachtrij beneden,  de wachtrij boven en  aantal schepen in de sluis
const int aantal_wachtrijen=3;

const int SIZE=3;
//queue_of_ships stack[SIZE];
//int myarray[3] := {stack[SIZE], stack[SIZE], stack[SIZE]};
//int wachtrij_beneden[SIZE];
//int stack[SIZE];
//int wachtrij_boven[SIZE];
//int[0, 2] myarray[stack[SIZE]];
//int queues[queue];


const int aantal_queues=1;
//typedef int[0, aantal_queues-1] queue;// goed
typedef int[0, aantal_queues-1] id_q; // ook goed
//typedef int[0, aantal_wachtrijen-1] que; // ook goed
//typedef int[0,aantal_wachtrijen-1] queue_of_ships; // ook goed
//int[-1,6] mystack[SIZE]; // size is minimaal -1 en max gelijk aan 6 ?? Is dit een fout in Uppaal waar me rekening mee moeten houden in geval van state explosion???
//int queues[que];



// identifier voor deuren
int[0,1] gatenr;
const int aantal_deuren=1;
typedef int[0, aantal_deuren] id_d;
//const int deuren = 2;
//typedef int[0,deuren-1] deur;
//bool deur_is_open[id_d];
//chan deur_openen[id_d];
//chan deur_sluiten[id_d];
//bool deur_is_gesloten[id_d];
//chan open_gate[id_d];
//chan close_gate[id_d];
chan deurklik[id_d];


// identifier voor stoplichten
// id=0 invaren beneden
// id=1 uitvaren beneden
// id=2 uitvaren boven
// id=3  invaren boven
const int aantal_stoplichten=2;
typedef int[0,aantal_stoplichten-1] stoplicht;
typedef int[0, aantal_stoplichten-1] id_s;
chan stoplichtklik[id_s];
//chan start_stoplicht_uitvaren[id_s];
//chan stop_stoplicht_uitvaren[id_s];
//chan start_stoplicht_invaren[id_s];
//chan stop_stoplicht_invaren[id_s];



// identifier voor sensoren
//const int aantal_sensoren=4;
//typedef int[0, aantal_sensoren-1] id_sensor;
//typedef int[0,SIZE_STACK-1] stack;
/**
*/


//const int pompen = 1;
//typedef int[0,pompen-1] pomp_id;
chan pomp_klik;
//chan boot_aanwezig;
//chan toggle_pomp[pomp_id];



//chan send[kenteken], receive[kenteken];

//const int positions=2;
//typedef int[0,positions-1] locatie;
//chan shipTrigger[locatie];
 clock x;
clock systemtime;
clock processtime;

//chan	done, ready, run, stop;