<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
// examples v1_12_06_2022 
// examples v1_13_06_2022 

// List one or more processes to be composed into a system.
//system schip,aanvoer,afvoer;
 
//system pomp,pompbediening;   
// for more uppaal documentation https://docs.uppaal.org/language-reference/expressions/

/** Requirementsoverzicht
 * Een sluis heeft deuren voor openenen en sluiten.
 * Een sluis heeft stoplichten met rood en groen waarmee toestemming al dann wel neit wordt gegeven voor schepen voor invaren of uitvaren.
 * Een schip heeft een positie en een doel
 * Een schip kan zich aanmelden
 * De pompbediening handelt de aanvraag van invarende, wachtende en uitvarende schepen af
 * Een schip kan in een wachtrij staan voodat hij een sluis invaart beneden.
 * Een schip kan in een wachtrij staan voodat hij een sluis invaart boven.
 * Een schip kan in een wachtrij staan voordat deze een sluis verlaat.
 * Als een sluis vol is komt een schip automatisch in een wachtrij.
 * Een sluis heeft een pomp(nivelleeersystseem) voor  hoog, midden, laag.
 * Een sluis houdt bij hoeveel schepen invaren.
 * Een sluis houdt bij wat de waterstand is.
 *
 * Scenario
 * Vanuit idle wordt er een schip toegevoegd aan de wachtrij boven of beneden. De sluis blijft in de wacthmodus totdat de wachtrij boven of beneden vol is.
 * 
*/

clock realtime;
bool entrance_schip,schip_boven=true,schip_beneden=false;
bool direction = false;
bool process_started = false;
bool process_finished = false;
//const int deuren = 2;
//typedef int[0,deuren-1] deur;
//bool gate_is_open[deur];


bool togglePomp = false;
bool startDown =false;
bool startUp= true;




bool sluisToggle = false;
bool sluisIsBezig = false;

int[-1,6] waterniveau = 0;

chan schipklik;

chan deurklik;
//typedef int[0,10] meter;
//meter waterlevel;
int[-1,10] waterlevel=0;


// identifier voor schepen
const int MAX_schepen=3;
typedef int[0,MAX_schepen-1] kenteken;

//chan send[0,1],receive[0,1];

chan notified_pomp_direction;


// identifier voor wachtrij
// aantal queues voor wachtrij beneden,  de wachtrij boven en  aantal schepen in de sluis
const int aantal_wachtrijen=3;

const int SIZE=3;
//queue_of_ships stack[SIZE];
//int myarray[3] := {stack[SIZE], stack[SIZE], stack[SIZE]};
int wachtrij_beneden[SIZE];
//int stack[SIZE];
int wachtrij_boven[SIZE];
//int[0, 2] myarray[stack[SIZE]];
//int queues[queue];


const int aantal_queues=2;
typedef int[0, aantal_queues-1] queue;// goed
typedef int[0, aantal_queues-1] id_q; // ook goed
typedef int[0, aantal_wachtrijen-1] que; // ook goed
typedef int[0,aantal_wachtrijen-1] queue_of_ships; // ook goed
int[-1,6] mystack[SIZE]; // size is minimaal -1 en max gelijk aan 6 ?? Is dit een fout in Uppaal waar me rekening mee moeten houden in geval van state explosion???
int queues[que];



// identifier voor deuren
int[0,1] gatenr;
const int aantal_deuren=2;
typedef int[0, aantal_queues-1] id_d;
const int deuren = 2;
typedef int[0,deuren-1] deur;
bool deur_is_open[id_d];
chan deur_openen[id_d];
chan deur_sluiten[id_d];
bool deur_is_gesloten[id_d];
chan open_gate[id_d];
chan close_gate[id_d];



// identifier voor stoplichten

const int aantal_stoplichten=4;
typedef int[0,aantal_stoplichten-1] stoplicht;
typedef int[0, aantal_stoplichten-1] id_s;
chan stoplichtklik[id_s];
chan start_stoplicht_uitvaren[id_s];
chan stop_stoplicht_uitvaren[id_s];
chan start_stoplicht_invaren[id_s];
chan stop_stoplicht_invaren[id_s];



// identifier voor sensoren
const int aantal_sensoren=4;
typedef int[0, aantal_sensoren-1] id_sensor;
//typedef int[0,SIZE_STACK-1] stack;
/**

*/

const int pompen = 2;
typedef int[0,pompen-1] pomp_id;
chan pomp_klik[pomp_id];
chan boot_aanwezig;
chan toggle_pomp[pomp_id];



chan send[kenteken], receive[kenteken];

const int positions=2;
typedef int[0,positions-1] locatie;
chan shipTrigger[locatie];

 clock x;</declaration>
	<template>
		<name>maincontroller</name>
		<declaration>// een schip kan zich anamelden bij de sluis(control system); een machine; deze voert bewerkingen uit op de omgeving met informatie van de beheerder
// de sluis bedient de waterpomp,sluisdeur,stoplicht,aanvoer en afvoer van schepen

/** stack
 * de lengte van de datastructuur
*/
const int time_step = 2;




/**
 *
*/
int[0,SIZE] head =0;

/** pop
 *
*/
kenteken pop_left()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}


kenteken pop_center()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}

kenteken pop_right()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}


/** push
 *
*/
void push(kenteken p)
{
    //stack[head++]=p;
}


/** isFull
 *
*/
bool isFull()
{
    return (head==SIZE);
}


/** isEmpty
 *
*/
bool isEmpty()
{
 return (head ==0);
}

void reset()
{}</declaration>
		<location id="id0" x="-280" y="0">
			<name x="-290" y="-34">idle</name>
			<label kind="comments" x="-875" y="93">Check realtime clock. Luster naar signalen van de sensors boven en beneden.
Check of sluis leeg is.
Indien sluis niet leeg is dan werk afmaken.
Als sluis leeg is dan positie wachtend schip.
Pomp water in/uit de sluis.
Sluisdeur open.
Stoplcht groen uitvaren.
Schepen laten uitvaren.
Stoplicht rood uitvaren.
Stoplicht groen invaren.
Schepen laten invaren.
Stoplicht rood invaren.
Sluisdeuren sluiten.</label>
		</location>
		<location id="id1" x="442" y="0">
			<label kind="comments" x="569" y="136">verwijder uit de sluiskolk en voeg toe aan de array voor schepen in de wachtrij of beschouw als uuitvarend

To DO
Een uitvarend schip kan niet  worden toegevoegd aan de lijst met wachtende schepen.</label>
		</location>
		<location id="id2" x="884" y="0">
			<name x="892" y="25">empty_queue</name>
			<label kind="invariant" x="901" y="51">queues[direction]&gt;=0 &amp;&amp; x&lt;=time_step</label>
		</location>
		<location id="id3" x="136" y="-136">
			<name x="126" y="-170">water_omhoog</name>
			<label kind="invariant" x="280" y="-187">waterniveau&gt;=0&amp;&amp;x&lt;=time_step</label>
		</location>
		<location id="id4" x="136" y="221">
			<name x="119" y="229">water_omlaag</name>
			<label kind="invariant" x="110" y="255">waterniveau&lt;=5&amp;&amp;x&lt;=time_step</label>
		</location>
		<location id="id5" x="-85" y="0">
			<name x="-95" y="-34">deur_check</name>
			<label kind="comments" x="-95" y="59">verwijder uit de wachtrij en voeg toe aan de array voor schepen in de sluiskolk


myarray[0][0]++,queues[!direction]--, queues[2]++</label>
		</location>
		<location id="id6" x="-178" y="0">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="-262" y="-34">direction</label>
			<nail x="-187" y="0"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="477" y="-17">open_gate[direction]!</label>
			<nail x="459" y="0"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-67" y="187">!direction</label>
			<nail x="-85" y="221"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-67" y="-170">direction</label>
			<nail x="-85" y="-17"/>
			<nail x="-85" y="-136"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-440" y="-22">realtime==21</label>
			<label kind="comments" x="-356" y="8">update:
reset()</label>
			<nail x="-374" y="-34"/>
			<nail x="-374" y="68"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="527" y="272">queues[direction]&lt;=0&amp;&amp;sluisToggle</label>
			<label kind="synchronisation" x="527" y="289">close_gate[direction]!</label>
			<label kind="assignment" x="527" y="306">direction=!direction, sluisToggle:=false</label>
			<nail x="883" y="34"/>
			<nail x="883" y="340"/>
			<nail x="-170" y="340"/>
			<nail x="-170" y="42"/>
			<nail x="-102" y="42"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="comments" x="1139" y="-34">guard:
sluisToggle==false &amp;&amp; queues[direction]&lt;=0
sync:
close_gate[direction]!
update:
sluisIsBezig:=false, queues[!direction] := 0

update:myarray[direction]++</label>
			<nail x="1019" y="0"/>
			<nail x="1019" y="-238"/>
			<nail x="-280" y="-238"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="comments" x="425" y="85">gyuard:
waterniveau&gt;=5

sync:

notified_pomp_direction[direction]!
update:</label>
			<nail x="153" y="221"/>
			<nail x="442" y="221"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="assignment" x="102" y="119">waterniveau--, x:=0</label>
			<nail x="102" y="162"/>
			<nail x="170" y="162"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="assignment" x="119" y="-68">waterniveau++, x:=0</label>
			<nail x="170" y="-68"/>
			<nail x="102" y="-68"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="comments" x="154" y="-111">select:

guard:
waterniveau==0


sync:
notified_pomp_direction[direction]!


update:</label>
			<nail x="442" y="-136"/>
		</transition>
	</template>
	<template>
		<name>main</name>
		<declaration>
/**
 * Requirements
 * Voordat het template de states stoplicht en deur heeft bereikt is de richting van het schip bekend en tegengesteld aan de huidige positie.
 * In de idle stand is het mogeljk dat de clocktijd niet gelijk is aan nul, omdat het systeem alleen op 120 tijdseenheden en 
 * Een pomp is actief als er nul of 1 of 2 schepen in de sluis zitten.
 * De sluis heeft een trigger waarmee een actie kan worden gestart met een preconditie gerelateerd aan 1 van de volgende tenplates:schip,stoplicht,systeemtime,pomp,deur.
 *
 *
*/
clock systemtime;
int  thresholdUp = 120;
int thresholdDown=210;





bool waterlockStartPosition()
{

    return false;
}


bool isFull()
{
    return false;
}</declaration>
		<location id="id7" x="-238" y="0">
			<name x="-248" y="-34">Direction</name>
			<committed/>
		</location>
		<location id="id8" x="-102" y="0">
			<name x="-112" y="-34">Stoplicht</name>
		</location>
		<location id="id9" x="306" y="0">
		</location>
		<location id="id10" x="578" y="-136">
		</location>
		<location id="id11" x="578" y="204">
		</location>
		<location id="id12" x="816" y="0">
		</location>
		<location id="id13" x="952" y="0">
			<name x="942" y="-34">Heropenen</name>
		</location>
		<location id="id14" x="-374" y="0">
			<name x="-384" y="-34">idle</name>
		</location>
		<location id="id15" x="68" y="0">
			<name x="25" y="-34">Deur</name>
		</location>
		<location id="id16" x="204" y="0">
			<name x="194" y="-34">trigger</name>
		</location>
		<location id="id17" x="-102" y="170">
			<name x="-161" y="229">pending_queue_direction</name>
		</location>
		<location id="id18" x="1054" y="0">
			<name x="1020" y="-68">Toestemming_uitvaren</name>
		</location>
		<location id="id19" x="1173" y="0">
			<name x="1163" y="-34">Schip_uitvaren</name>
		</location>
		<location id="id20" x="1283" y="0">
			<name x="1273" y="-34">Schip_uitschrijven</name>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
			<label kind="guard" x="-322" y="-68">realtime==thresholdUp</label>
			<label kind="assignment" x="-348" y="-59">direction=true</label>
			<nail x="-365" y="-17"/>
			<nail x="-340" y="-34"/>
			<nail x="-272" y="-34"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id8"/>
			<nail x="-34" y="136"/>
			<nail x="-34" y="34"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="guard" x="86" y="-289">direction</label>
			<label kind="assignment" x="86" y="-255">systemtime++</label>
			<nail x="68" y="-255"/>
			<nail x="1173" y="-255"/>
			<nail x="1173" y="0"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id7"/>
			<nail x="952" y="340"/>
			<nail x="-238" y="331"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id14"/>
			<label kind="guard" x="-356" y="-306">process_finished==true &amp;&amp; process_started==false&amp;&amp; systemtime&gt;=60</label>
			<label kind="assignment" x="-356" y="-272">systemtime=0</label>
			<nail x="1283" y="-272"/>
			<nail x="-374" y="-272"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="assignment" x="1072" y="0">systemtime++</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id18"/>
			<label kind="assignment" x="970" y="0">systemtime++</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="select" x="596" y="204">nummer: pomp_id</label>
			<label kind="synchronisation" x="596" y="238">pomp_klik[nummer]!</label>
			<nail x="646" y="306"/>
			<nail x="518" y="306"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="select" x="528" y="-238">nummer: pomp_id</label>
			<label kind="synchronisation" x="528" y="-204">pomp_klik[nummer]!</label>
			<nail x="510" y="-238"/>
			<nail x="646" y="-238"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id17"/>
			<label kind="comments" x="-84" y="93">// als sluiskolk vol is dan plaatsnemen in wachtrij</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="212" y="-59">shipTrigger[direction]?</label>
			<label kind="assignment" x="222" y="0">systemtime++</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="assignment" x="86" y="0">systemtime++</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id15"/>
			<label kind="assignment" x="-84" y="0">systemtime+=1</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
			<label kind="guard" x="-365" y="25">realtime==thresholdDown</label>
			<label kind="assignment" x="-646" y="8">direction=false &amp;&amp; systemtime++</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="assignment" x="834" y="0">systemtime++</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="assignment" x="613" y="-136">systemtime++</label>
			<nail x="595" y="-136"/>
			<nail x="816" y="-136"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="assignment" x="596" y="204">systemtime++</label>
			<nail x="816" y="204"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="324" y="170">!direction &amp;&amp;process_started</label>
			<nail x="306" y="204"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="324" y="-170">direction</label>
			<nail x="306" y="-136"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-238" y="8">process_started=true</label>
		</transition>
	</template>
	<template>
		<name>gate</name>
		<parameter>id_d d</parameter>
		<declaration>
/**
 * Requirements
 * Een deur is tijdens een actieve pomp altijd gesloten
 * Een deur kan nooit open staan terwijl het stoplicht voor invaren/uitvaren op rood staat.
 * Een deur wordt altijd getriggerd vanuit de maincontroller en kan dus oneindig wachten totdat de maincontroller een opdracht geeft.
 * Een deur kan nooit in een oneindige tussenstand staan zoals: is bezig met openen of is bezig met sluiten.
 *
 *
*/
// parameter: const gatenr gatenummer
clock x;
int[0,1] currentstate;</declaration>
		<location id="id21" x="0" y="0">
		</location>
		<location id="id22" x="306" y="0">
			<name x="296" y="-34">closing</name>
		</location>
		<location id="id23" x="306" y="-204">
			<name x="296" y="-238">open</name>
		</location>
		<location id="id24" x="0" y="-204">
			<name x="-10" y="-238">opening</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="assignment" x="18" y="0">deur_is_open[entrance_schip] := false</label>
			<nail x="289" y="0"/>
			<nail x="280" y="0"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="306" y="-119">deurklik!</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="60" y="-238">currentstate==entrance_schip</label>
			<label kind="assignment" x="60" y="-204">deur_is_open[entrance_schip] := true, x:=0</label>
			<nail x="42" y="-204"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="0" y="-136">deurklik!</label>
			<nail x="0" y="-34"/>
		</transition>
	</template>
	<template>
		<name>schip</name>
		<parameter>kenteken id</parameter>
		<declaration>

/**
 * Requirements
 * Een schip kan maar 1 id/kenteken hebben en dit kenteken komt maar 1 keer in  de cyclus voor, inclusief de beide wachtrijen en de queue van de sluiskolk.
 * Een schip kan in de sluiskolk niet van richting veranderen
 * Een schip kan na het doorlopen van de cycli en uitgevaren zijn van de sluis een willekeurige andere positie en richting hebben aangenomen.
 *
 *
 *
*/
// const kenteken schipid
int positie =0;
clock x;

</declaration>
		<location id="id25" x="0" y="-102">
			<name x="-10" y="-136">ildle</name>
		</location>
		<location id="id26" x="0" y="51">
			<name x="-10" y="17">varen</name>
		</location>
		<init ref="id25"/>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<nail x="8" y="51"/>
			<nail x="170" y="51"/>
			<nail x="170" y="-102"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="comments" x="-187" y="-76">sync:
send[kenteken]


update:
positie: int[0,1]</label>
		</transition>
	</template>
	<template>
		<name>pomp</name>
		<parameter>pomp_id id</parameter>
		<declaration>
/**
 * Requirements
 * Een pomp is actief als de sluisdeuren en de stoplichten op rood zijn.
 * Een pomp kan nooit 2 cycli achterelkaar water de dezelfde richting pompen.
 *
 *
 *
 *
*/
clock x;


/**
 * de pomp moet aan de hand van een input paranter weten of hij eerst vullen of wegpompen
*/

/**
 *
*/
void functie()
{
	
}

/**
 *
*/
// een constraint op een bepaalde variabele
bool isForMe()
{
	//if(pompnr &lt; 2 &amp;&amp; waterlevel&lt;6) return true;
	//else if(pompnr&gt;1 &amp;&amp; waterlevel&gt;=6) return true;
	 return false;
}

/**
 *
*/
//pomp omlaag
bool isLaag()
{
	//if(pompnr &lt; 2 &amp;&amp; waterlevel&lt;6) return true;
	//else
    return false;
}

/**
 *
*/
//pomp omhoog
bool isHoog()
{
    //if(pompnr&gt;1 &amp;&amp; waterlevel&gt;=6) return true;
	//else return false;
 return false;
}

</declaration>
		<location id="id27" x="0" y="0">
			<name x="-10" y="-34">pomp_uit</name>
			<label kind="comments" x="-620" y="93">ipv aan en uit states kan er ook gekozen worden voor de states laag en hoog</label>
		</location>
		<location id="id28" x="102" y="136">
			<name x="92" y="102">pomp_aan</name>
		</location>
		<location id="id29" x="204" y="238">
			<name x="194" y="204">active</name>
		</location>
		<init ref="id27"/>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="120" y="233">!direction</label>
			<label kind="assignment" x="120" y="267">waterlevel--</label>
			<nail x="102" y="297"/>
			<nail x="170" y="348"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="239" y="174">direction</label>
			<label kind="assignment" x="239" y="208">waterlevel++</label>
			<nail x="221" y="238"/>
			<nail x="314" y="178"/>
			<nail x="340" y="272"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="18" y="119">pomp_klik[id]?</label>
			<nail x="0" y="136"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="52" y="-17">pomp_klik[id]?</label>
			<nail x="34" y="0"/>
			<nail x="102" y="0"/>
		</transition>
	</template>
	<template>
		<name>sluiskolk</name>
		<declaration>
/**
 * Requirements
 * Er kunnen maximaal 2 schepen in de sluis.
 * De kentekens van schepen in de sluis is nooit gelijk aan een kenteken van een schip in een wachtrij.
 *
 *
 *
 *
*/
// parameter: const stack  q

bool is_full()
{
    return false;
}


void dequeues()
{
}


void enqueue()
{
}

bool is_empty()
{
    return false;
}

bool go_out()
{
    return false;
}


bool lock_empty()
{
    return false;
}


chan lock_full;

chan to_lock;
//chan go_out;</declaration>
		<location id="id30" x="-136" y="68">
			<name x="-146" y="34">idle</name>
		</location>
		<location id="id31" x="0" y="68">
		</location>
		<location id="id32" x="136" y="68">
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id32"/>
			<target ref="id30"/>
			<label kind="comments" x="-84" y="195">guard:
!is_empty()

sync:
lock_empty()


update:</label>
			<nail x="102" y="170"/>
			<nail x="-102" y="170"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="comments" x="306" y="17">guard:


sync:
!is_empty()

update:
dequeues()</label>
			<nail x="204" y="-34"/>
			<nail x="204" y="136"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="comments" x="51" y="-102">guard:


sync:
go_out?
update:</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="guard" x="-118" y="34">is_full()</label>
			<label kind="synchronisation" x="-118" y="51">lock_full!</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="guard" x="-306" y="42">!is_full()</label>
			<label kind="comments" x="-186" y="42">Guard:



sync:
to_lock[i]?

Update:

enqueue(i)</label>
			<nail x="-204" y="-34"/>
			<nail x="-204" y="136"/>
		</transition>
	</template>
	<template>
		<name>wachtrij</name>
		<parameter>id_q q</parameter>
		<declaration>
/**
 * Requirements
 * Een wachtrij kan maximaal 2 schepen bevatten.
 * Een aanvarend schip kan maximaal 1 cyclus in de wachtrij staan.
 *
 *
 *
 *
*/

clock x;</declaration>
		<location id="id33" x="0" y="0">
			<name x="-10" y="-34">idle</name>
		</location>
		<location id="id34" x="119" y="0">
			<name x="109" y="-34">add</name>
		</location>
		<location id="id35" x="238" y="0">
			<name x="228" y="-34">release</name>
		</location>
		<init ref="id33"/>
		<transition>
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="-84" y="-97">x&gt;=2</label>
			<label kind="assignment" x="-84" y="-63">x:=0</label>
			<nail x="-34" y="-25"/>
			<nail x="-102" y="-68"/>
			<nail x="-102" y="68"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id35"/>
			<label kind="guard" x="273" y="-84">x&lt;2</label>
			<nail x="272" y="-25"/>
			<nail x="340" y="-68"/>
			<nail x="340" y="68"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id33"/>
			<nail x="238" y="25"/>
			<nail x="238" y="102"/>
			<nail x="0" y="102"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id35"/>
			<nail x="136" y="0"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<nail x="34" y="0"/>
		</transition>
	</template>
	<template>
		<name>stoplight</name>
		<parameter>id_s s</parameter>
		<declaration>
/**
 * Requirements
 * Een stoplicht is tijdens een actieve pomp altijd op rood.
 * Een invaar- en uitvaarstoplicht kunnen niet beiden op groen staan, omdat er dan een botsing kan voorkomen.
 * Een invaar- en uitvaarstoplicht kunnen beiden op rood staan.
 *
 *
 *
*/

// stoplicht 0
// stoplicht 1
// stoplicht 2
// stoplicht 3
clock timer;</declaration>
		<location id="id36" x="0" y="0">
			<name x="-10" y="-34">rood</name>
		</location>
		<location id="id37" x="272" y="0">
			<name x="262" y="-34">groen</name>
		</location>
		<init ref="id36"/>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="93" y="-42">stoplichtklik[s]?</label>
			<nail x="34" y="0"/>
			<nail x="170" y="0"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="guard" x="18" y="102">timer&gt;10</label>
			<nail x="272" y="136"/>
			<nail x="0" y="136"/>
		</transition>
	</template>
	<template>
		<name>sensor</name>
		<parameter>id_sensor s</parameter>
		<declaration>
/**
 * Requirements
 *
 *
 *
 *
 *
 *
*/</declaration>
		<location id="id38" x="0" y="0">
		</location>
		<init ref="id38"/>
		<transition>
			<source ref="id38"/>
			<target ref="id38"/>
			<label kind="select" x="144" y="-51">send_ais : kenteken</label>
			<label kind="synchronisation" x="102" y="-93">send[send_ais]!</label>
			<nail x="51" y="-102"/>
			<nail x="119" y="-42"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id38"/>
			<label kind="select" x="-272" y="-76">received_ais : kenteken</label>
			<label kind="synchronisation" x="-127" y="-144">receive[received_ais]?</label>
			<nail x="-8" y="-8"/>
			<nail x="-68" y="-68"/>
			<nail x="0" y="-102"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();
// List one or more processes to be composed into a system.
system main,gate,pomp,sluiskolk,schip,stoplight;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
