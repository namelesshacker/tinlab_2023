<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
bool direction = 0;
bool process_busy = false;
chan initOpenProc,initClosingProc;
bool position=0;
bool sluisToggle = false;
bool sluisIsBezig = false;
int[-10,10] waterlevel=0;


// identifier voor schepen
const int MAX_schepen=1;
typedef int[0,MAX_schepen] kenteken;
chan schipklik[kenteken];
chan register[kenteken];
chan unregister[kenteken];
chan notified_pomp_direction;
const int aantal_wachtrijen=3;
const int SIZE=3;
const int aantal_queues=1;
typedef int[0, aantal_queues-1] id_q; // ook goed
// identifier voor deuren
int[0,1] gatenr;
const int aantal_deuren=1;
typedef int[0, aantal_deuren] id_d;
chan deurklik[id_d];

// identifier voor stoplichten
const int aantal_stoplichten=2;
typedef int[0,aantal_stoplichten-1] stoplicht;
typedef int[0, aantal_stoplichten-1] id_s;
chan stoplichtklik[id_s];
// identifier voor sensoren

//const int pompen = 1;
//typedef int[0,pompen-1] pomp_id;
chan pomp_klik;
clock x;
clock systemtime;
//clock processtime;

//chan	done, ready, run, stop;</declaration>
	<template>
		<name>proc1</name>
		<declaration> clock x;</declaration>
		<location id="id0" x="136" y="-340">
			<name x="126" y="-374">r3</name>
		</location>
		<location id="id1" x="136" y="-612">
			<name x="126" y="-646">r5</name>
		</location>
		<location id="id2" x="25" y="-340">
			<name x="15" y="-374">r2</name>
		</location>
		<location id="id3" x="-102" y="-340">
			<name x="-110" y="-374">OpeningLow</name>
		</location>
		<location id="id4" x="-646" y="-442">
			<name x="-656" y="-476">crossleft</name>
		</location>
		<location id="id5" x="-646" y="-612">
			<name x="-656" y="-646">l5</name>
		</location>
		<location id="id6" x="-646" y="-340">
			<name x="-656" y="-374">l3</name>
		</location>
		<location id="id7" x="-510" y="-340">
			<name x="-520" y="-374">l2</name>
		</location>
		<location id="id8" x="-408" y="-340">
			<name x="-425" y="-399">OpeningHigh</name>
		</location>
		<location id="id9" x="-238" y="-442">
			<name x="-248" y="-476">idle</name>
		</location>
		<location id="id10" x="-646" y="-612">
		</location>
		<location id="id11" x="-646" y="-612">
		</location>
		<location id="id12" x="-238" y="-340">
			<name x="-248" y="-374">s0</name>
		</location>
		<location id="id13" x="136" y="-442">
			<name x="126" y="-476">crossright</name>
		</location>
		<location id="id14" x="-408" y="-612">
			<name x="-418" y="-646">l6</name>
		</location>
		<location id="id15" x="-102" y="-612">
			<name x="-112" y="-646">r6</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="select" x="43" y="-391">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="76" y="-331">stoplichtklik[position]!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-221" y="-586">pomp_klik!</label>
			<label kind="assignment" x="-136" y="-501">sluisToggle=true,process_busy=false</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id15"/>
			<label kind="select" x="-51" y="-637">deur_id:id_d</label>
			<label kind="synchronisation" x="-84" y="-629">deurklik[position]!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-357" y="-586">pomp_klik!</label>
			<label kind="assignment" x="-408" y="-493">sluisToggle=true,process_busy=false</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="select" x="-603" y="-654">deur_id:id_d</label>
			<label kind="synchronisation" x="-628" y="-629">deurklik[position]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id1"/>
			<label kind="select" x="8" y="-578">shipid: kenteken</label>
			<label kind="synchronisation" x="0" y="-544">register[shipid]!</label>
			<nail x="136" y="-476"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id13"/>
			<label kind="select" x="136" y="-442">shipid: kenteken</label>
			<label kind="synchronisation" x="136" y="-408">schipklik[shipid]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-68" y="-331">stoplichtklik[position]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="select" x="-646" y="-578">shipid:kenteken</label>
			<label kind="synchronisation" x="-646" y="-544">register[shipid]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="select" x="-646" y="-442">shipid: kenteken</label>
			<label kind="synchronisation" x="-646" y="-408">schipklik[shipid]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-578" y="-340">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="-595" y="-314">stoplichtklik[position]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-561" y="-289">stoplichtklik[position]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="guard" x="-212" y="-425">process_busy==false</label>
			<label kind="synchronisation" x="-238" y="-408">initOpenProc?</label>
			<label kind="assignment" x="-238" y="-391">process_busy=true</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id3"/>
			<label kind="select" x="-229" y="-365">deurnummer: id_d</label>
			<label kind="guard" x="-204" y="-442">position==1 &amp;&amp; systemtime &gt;13</label>
			<label kind="synchronisation" x="-229" y="-340">deurklik[position]!</label>
			<label kind="assignment" x="-229" y="-297">process_busy=true</label>
			<nail x="-221" y="-340"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="select" x="-382" y="-314">deurnummer: id_d</label>
			<label kind="guard" x="-561" y="-433">position==0 &amp;&amp; systemtime &gt;08</label>
			<label kind="synchronisation" x="-390" y="-357">deurklik[position]!</label>
			<label kind="assignment" x="-390" y="-340">process_busy=true</label>
		</transition>
	</template>
	<template>
		<name>proc2</name>
		<declaration> clock x;</declaration>
		<location id="id16" x="-54418" y="-187">
			<name x="-54428" y="-221">r2</name>
		</location>
		<location id="id17" x="-54307" y="-187">
			<name x="-54317" y="-221">r3</name>
		</location>
		<location id="id18" x="-54307" y="-459">
			<name x="-54317" y="-493">r5</name>
		</location>
		<location id="id19" x="-54545" y="-187">
			<name x="-54555" y="-221">ClosingLow</name>
		</location>
		<location id="id20" x="-55089" y="-289">
			<name x="-55099" y="-323">crossleft</name>
		</location>
		<location id="id21" x="-55089" y="-459">
		</location>
		<location id="id22" x="-55089" y="-187">
			<name x="-55099" y="-221">l3</name>
		</location>
		<location id="id23" x="-54952" y="-187">
			<name x="-54962" y="-221">l2</name>
		</location>
		<location id="id24" x="-54851" y="-187">
			<name x="-54868" y="-246">ClosingHigh</name>
		</location>
		<location id="id25" x="-54681" y="-289">
			<name x="-54691" y="-323">idle</name>
		</location>
		<location id="id26" x="-55089" y="-459">
			<name x="-55099" y="-493">l5</name>
		</location>
		<location id="id27" x="-55089" y="-459">
		</location>
		<location id="id28" x="-54681" y="-187">
			<name x="-54691" y="-221">s0</name>
		</location>
		<location id="id29" x="-54307" y="-289">
			<name x="-54317" y="-323">crossright</name>
		</location>
		<location id="id30" x="-54851" y="-459">
			<name x="-54861" y="-493">l6</name>
		</location>
		<location id="id31" x="-54545" y="-459">
			<name x="-54555" y="-493">r6</name>
		</location>
		<init ref="id25"/>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="select" x="-54400" y="-238">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="-54408" y="-212">stoplichtklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-54664" y="-433">pomp_klik!</label>
			<label kind="assignment" x="-54579" y="-348">sluisToggle=true,process_busy=false</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id31"/>
			<label kind="select" x="-54494" y="-484">deur_id:id_d</label>
			<label kind="synchronisation" x="-54527" y="-476">deurklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-54800" y="-433">pomp_klik!</label>
			<label kind="assignment" x="-54851" y="-340">sluisToggle=true,process_busy=false</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id30"/>
			<label kind="select" x="-55046" y="-501">deur_id:id_d</label>
			<label kind="synchronisation" x="-55071" y="-476">deurklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id18"/>
			<label kind="select" x="-54435" y="-425">shipid: kenteken</label>
			<label kind="synchronisation" x="-54443" y="-391">unregister[shipid]!</label>
			<nail x="-54307" y="-323"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id29"/>
			<label kind="select" x="-54307" y="-289">shipid: kenteken</label>
			<label kind="synchronisation" x="-54307" y="-255">schipklik[shipid]!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-54553" y="-212">stoplichtklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="-55089" y="-425">shipid:kenteken</label>
			<label kind="synchronisation" x="-55089" y="-391">unregister[shipid]!</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="select" x="-55089" y="-289">shipid: kenteken</label>
			<label kind="synchronisation" x="-55089" y="-255">schipklik[shipid]!</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="select" x="-55021" y="-187">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="-55038" y="-161">stoplichtklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-54969" y="-212">stoplichtklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-54655" y="-280">process_busy==false</label>
			<label kind="synchronisation" x="-54655" y="-255">initClosingProc?</label>
			<label kind="assignment" x="-54681" y="-238">process_busy=true</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id19"/>
			<label kind="select" x="-54672" y="-136">deurnummer: id_d</label>
			<label kind="guard" x="-54672" y="-144">position==1 &amp;&amp; systemtime &gt;13</label>
			<label kind="synchronisation" x="-54663" y="-119">deurklik[direction]!</label>
			<label kind="assignment" x="-54646" y="-187">position=!position</label>
			<nail x="-54664" y="-187"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id24"/>
			<label kind="select" x="-54825" y="-161">deurnummer: id_d</label>
			<label kind="guard" x="-54859" y="-229">position==0 &amp;&amp; systemtime &gt;08</label>
			<label kind="synchronisation" x="-54825" y="-212">deurklik[direction]!</label>
			<label kind="assignment" x="-54893" y="-170">position=!position</label>
			<label kind="testcode">guard:</label>
		</transition>
	</template>
	<template>
		<name>maincontroller</name>
		<declaration>
/**
 * Requirements
 * Voordat het template de states stoplicht en deur heeft bereikt is de richting van het schip bekend en tegengesteld aan de huidige positie.
 * In de idle stand is het mogeljk dat de clocktijd niet gelijk is aan nul, omdat het systeem alleen op 120 tijdseenheden en 
 * Een pomp is actief als er nul of 1 of 2 schepen in de sluis zitten.
 * De sluis heeft een trigger waarmee een actie kan worden gestart met een preconditie gerelateerd aan 1 van de volgende tenplates:schip,stoplicht,systeemtime,pomp,deur.
 *
 *
*/

/**
clock systemtime;
int  thresholdUp = 0900;
int thresholdDown=1300;




/**
bool waterlockStartPosition()
{

    return false;
}

*/



// een schip kan zich anamelden bij de sluis(control system); een machine; deze voert bewerkingen uit op de omgeving met informatie van de beheerder
// de sluis bedient de waterpomp,sluisdeur,stoplicht,aanvoer en afvoer van schepen

/** stack
 * de lengte van de datastructuur
*/
//const int time_step = 2;




/**
 *
*/
//int[0,SIZE] head =0;

/** pop
 *
*/

/**
kenteken pop_left()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}
*/
/**
kenteken pop_center()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}
*/
/**
kenteken pop_right()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}
*/

/** push
 *
*/
/**
void push(kenteken p)
{
    //stack[head++]=p;
}
*/

/** isFull
 *
*/
/**
bool isFull()
{
    return (head==SIZE);
}
*/

/** isEmpty
 *
*/

/**
bool isEmpty()
{
 return (head ==0);
}
*/

/**
void reset()
{}

*/</declaration>
		<location id="id32" x="1088" y="-374">
			<name x="1054" y="-331">endCycle</name>
		</location>
		<location id="id33" x="578" y="-272">
			<committed/>
		</location>
		<location id="id34" x="442" y="-374">
			<name x="348" y="-399">startCycle</name>
		</location>
		<location id="id35" x="578" y="-476">
			<name x="568" y="-510">DefaultHigh</name>
			<committed/>
		</location>
		<location id="id36" x="714" y="-374">
			<name x="704" y="-408">procStart</name>
		</location>
		<location id="id37" x="1003" y="-374">
			<name x="994" y="-408">procEnd</name>
		</location>
		<location id="id38" x="841" y="-374">
			<name x="831" y="-408">running</name>
		</location>
		<location id="id39" x="926" y="-374">
			<name x="934" y="-323">finished</name>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="assignment" x="562" y="-442">position=1</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id36"/>
			<label kind="assignment" x="552" y="-255">position=0</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id34"/>
			<label kind="assignment" x="460" y="-578">systemtime:=0</label>
			<nail x="1088" y="-578"/>
			<nail x="442" y="-578"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id32"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="918" y="-297">initClosingProc!</label>
			<nail x="960" y="-374"/>
			<nail x="985" y="-374"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="714" y="-306">initOpenProc!</label>
			<label kind="comments" x="391" y="-255">select:
guard:  
sync:initOpenProc!
update:</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="assignment" x="460" y="-323">direction=1</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="assignment" x="460" y="-442">direction=0</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="comments" x="1139" y="-221">select:
guard: (position==1 &amp;&amp; waterlevel==0) || (position==0 &amp;&amp; waterlevel==10)
sync:
update:</label>
			<nail x="867" y="-374"/>
			<nail x="901" y="-374"/>
			<nail x="884" y="-374"/>
		</transition>
	</template>
	<template>
		<name>deur</name>
		<parameter>id_d d</parameter>
		<declaration>
/**
 * Requirements
 * Een deur is tijdens een actieve pomp altijd gesloten
 * Een deur kan nooit open staan terwijl het stoplicht voor invaren/uitvaren op rood staat.
 * Een deur wordt altijd getriggerd vanuit de maincontroller en kan dus oneindig wachten totdat de maincontroller een opdracht geeft.
 * Een deur kan nooit in een oneindige tussenstand staan zoals: is bezig met openen of is bezig met sluiten.
 *
 *
*/
// parameter: const gatenr gatenummer
clock x;
//int[0,1] currentstate;</declaration>
		<location id="id40" x="0" y="0">
			<name x="-17" y="8">closed</name>
		</location>
		<location id="id41" x="0" y="-204">
			<name x="-10" y="-238">open</name>
		</location>
		<init ref="id40"/>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="guard" x="18" y="-221">x&gt;1</label>
			<label kind="synchronisation" x="102" y="-161">deurklik[d]?</label>
			<nail x="68" y="-170"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="guard" x="-50" y="-51">x&gt;1</label>
			<label kind="synchronisation" x="-178" y="-153">deurklik[d]?</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-170"/>
		</transition>
	</template>
	<template>
		<name>schip</name>
		<parameter>kenteken id</parameter>
		<declaration>

/**
 * Requirements
 * Een schip kan maar 1 id/kenteken hebben en dit kenteken komt maar 1 keer in  de cyclus voor, inclusief de beide wachtrijen en de queue van de sluiskolk.
 * Een schip kan in de sluiskolk niet van richting veranderen
 * Een schip kan na het doorlopen van de cycli en uitgevaren zijn van de sluis een willekeurige andere positie en richting hebben aangenomen.
 *
 *
 *
*/
// const kenteken schipid
//int positie =0;
//bool myDirection = false;
clock x;

</declaration>
		<location id="id42" x="0" y="-102">
			<name x="-10" y="-136">idle</name>
		</location>
		<location id="id43" x="0" y="51">
			<name x="-10" y="17">varen</name>
		</location>
		<init ref="id42"/>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="guard" x="59" y="17">x&gt;5</label>
			<nail x="8" y="51"/>
			<nail x="170" y="51"/>
			<nail x="170" y="-102"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="select" x="0" y="-76">shipid: kenteken</label>
			<label kind="synchronisation" x="0" y="-42">schipklik[shipid]?</label>
			<label kind="comments" x="-187" y="-76">sync:
send[kenteken]


update:
positie: int[0,1]</label>
		</transition>
	</template>
	<template>
		<name>sluis</name>
		<declaration>
/**
 * Requirements
 * Een wachtrij kan maximaal 2 schepen bevatten.
 * Een aanvarend schip kan maximaal 1 cyclus in de wachtrij staan.
 *
 *
 *
 *
*/

/**
 * Requirements
 * Er kunnen maximaal 2 schepen in de sluis.
 * De kentekens van schepen in de sluis is nooit gelijk aan een kenteken van een schip in een wachtrij.
 *
 *
 *
 *
*/
const int N = 1;          //
clock x;
kenteken list[N+1];
int[0,N] len;



// parameter: const stack  q

bool is_full()
{
    return false;
}


void dequeues()
{
    int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}


void enqueue(kenteken element)
{
     //list[element] = element;
     list[element] = element;
}
void dequeue(kenteken element)
{
     list[element] = 0;
}
bool is_empty()
{
    return false;
}

bool go_out()
{
    return false;
}


bool lock_empty()
{
    return false;
}

/*
// Returns the front element of the queue
id_t frontElement()
{
     return list[len - 1];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}
*/

chan lock_full;

chan to_lock;
//chan go_out;</declaration>
		<location id="id44" x="0" y="0">
			<name x="-10" y="-34">idle</name>
		</location>
		<location id="id45" x="119" y="0">
			<name x="109" y="-34">add</name>
		</location>
		<location id="id46" x="238" y="0">
			<name x="228" y="-34">release</name>
		</location>
		<init ref="id44"/>
		<transition>
			<source ref="id46"/>
			<target ref="id44"/>
			<nail x="238" y="25"/>
			<nail x="238" y="102"/>
			<nail x="0" y="102"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="select" x="154" y="-51">shipid: kenteken</label>
			<label kind="guard" x="154" y="-34">x&gt;2</label>
			<label kind="synchronisation" x="154" y="-17">unregister[shipid]?</label>
			<label kind="assignment" x="154" y="0">dequeue(shipid)</label>
			<nail x="136" y="0"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="select" x="52" y="-51">shipid: kenteken</label>
			<label kind="guard" x="52" y="-34">x&gt;2</label>
			<label kind="synchronisation" x="52" y="-17">register[shipid]?</label>
			<label kind="assignment" x="52" y="0">enqueue(shipid)</label>
			<label kind="comments" x="52" y="25">select:
guard:position==0 &amp;&amp; systemtime&gt;0900
sync:schipklik[shipid]!
update:enqueue(shipid)</label>
			<nail x="34" y="0"/>
		</transition>
	</template>
	<template>
		<name>pomp</name>
		<declaration> clock x;</declaration>
		<location id="id47" x="-714" y="34">
			<name x="-724" y="0">uit</name>
			<label kind="comments" x="-901" y="374">ipv aan en uit states kan er ook gekozen worden voor de states laag en hoog</label>
		</location>
		<location id="id48" x="-612" y="170">
			<name x="-622" y="136">aan</name>
		</location>
		<init ref="id47"/>
		<transition>
			<source ref="id48"/>
			<target ref="id48"/>
			<label kind="guard" x="-731" y="204">position==0 &amp;&amp; waterlevel&lt;10</label>
			<label kind="assignment" x="-612" y="221">waterlevel++</label>
			<label kind="comments" x="-824" y="229">select:
guard: sluisToggle==false 
sync:
update: waterlevel++</label>
			<nail x="-612" y="272"/>
			<nail x="-578" y="272"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id48"/>
			<label kind="guard" x="-594" y="136">position==1 &amp;&amp; waterlevel&gt;-10</label>
			<label kind="assignment" x="-594" y="170">waterlevel--</label>
			<label kind="comments" x="-527" y="-50">select:
guard:position==1 &amp;&amp; waterlevel&gt;-10
sync:
update:waterlevel--</label>
			<nail x="-510" y="170"/>
			<nail x="-510" y="204"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="guard" x="-696" y="136">x&gt;1</label>
			<label kind="synchronisation" x="-696" y="153">pomp_klik?</label>
			<label kind="testcode">update: sluisIsBezig=false</label>
			<nail x="-714" y="170"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-662" y="0">x&gt;1</label>
			<label kind="synchronisation" x="-662" y="17">pomp_klik?</label>
			<nail x="-680" y="34"/>
			<nail x="-612" y="34"/>
		</transition>
	</template>
	<template>
		<name>stoplight</name>
		<parameter>id_s s</parameter>
		<declaration>
/**
 * Requirements
 * Een stoplicht is tijdens een actieve pomp altijd op rood.
 * Een invaar- en uitvaarstoplicht kunnen niet beiden op groen staan, omdat er dan een botsing kan voorkomen.
 * Een invaar- en uitvaarstoplicht kunnen beiden op rood staan.
 *
 *
 *
*/

// stoplicht 0
// stoplicht 1
// stoplicht 2
// stoplicht 3
 clock x;</declaration>
		<location id="id49" x="0" y="0">
			<name x="-10" y="-34">rood</name>
		</location>
		<location id="id50" x="272" y="0">
			<name x="262" y="-34">groen</name>
		</location>
		<init ref="id49"/>
		<transition>
			<source ref="id49"/>
			<target ref="id50"/>
			<label kind="synchronisation" x="93" y="-42">stoplichtklik[s]?</label>
			<nail x="34" y="0"/>
			<nail x="170" y="0"/>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id49"/>
			<label kind="guard" x="18" y="102">x&gt;3</label>
			<label kind="synchronisation" x="18" y="119">stoplichtklik[s]?</label>
			<nail x="272" y="136"/>
			<nail x="0" y="136"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();
// List one or more processes to be composed into a system.
system maincontroller,deur,pomp,sluis,schip,stoplight,proc1,proc2;
//system maincontroller,deur,pomp,sluis,schip,stoplight,OpeningProc,ClosingProc;
//system newmain,newmainOpeningProc,request,priorityQueue,priorityQueue,newmainClosingProc,sensorLow,sensorHigh,waterlevelSensorLow,waterlevelSensorHigh,newpomp,newdeur,sluis;</system>
	<queries>
		<query>
			<formula>E[] deur(0).open imply deur(0).closed </formula>
			<comment>De deur sluiten kan binnen 30 tijdseenheden
A[] (deur(0).open --&gt;deur(0).closed)  imply (systemtime&gt;=5 and systemtime&lt;=3)</comment>
		</query>
		<query>
			<formula>A[] not (waterlevel&lt;=-10 || waterlevel&gt;=10)</formula>
			<comment>De pomp kan niet meer water bijpompen dan toegestaan op het interval [-10,10].
</comment>
		</query>
		<query>
			<formula>A[]  waterlevel&gt;=-10</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] sluis.list[sluis.N-1]==0</formula>
			<comment>Het is nooit mogelijk dat er een N aantal schepen in de sluis zijn (dus deze array heeft nooit overflow).</comment>
		</query>
		<query>
			<formula>A[] deur(0).open imply (systemtime&gt;=2 and systemtime&lt;=3)</formula>
			<comment>Hoe lang blijft deur open</comment>
		</query>
		<query>
			<formula>A[] deur(0).closed imply deur(1).open  </formula>
			<comment>hoelang duurt openen</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (deur(0).open imply deur(1).closed)</formula>
			<comment>Hoelang duurt sluiten van een deur
A[] (deur(0).open imply A&lt;&gt; (deur(1).closed imply systemtime&gt;=2))
A[] (p imply A&lt;&gt; q)</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (deur(1).closed imply systemtime&gt;=2)</formula>
			<comment>A[] (deur(0).open imply A&lt;&gt; (deur(1).closed imply systemtime&gt;=2))</comment>
		</query>
		<query>
			<formula>A[] stoplight(0).groen  imply (systemtime&gt;=2 and systemtime&lt;=3)</formula>
			<comment>Hooelang blijft stoplicht op groen</comment>
		</query>
		<query>
			<formula>A[] stoplight(0).groen imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoelang duurt van rood naar groen</comment>
		</query>
		<query>
			<formula>A[] stoplight(1).groen imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoelang duurt van groen naar rood</comment>
		</query>
		<query>
			<formula>A[] schip(0).varen imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Invaren van een schip duurt max 30 tijdseenheden.
</comment>
		</query>
		<query>
			<formula>A[] schip(0).idle || schip(1).idle and (deur(0).closed &amp;&amp; deur(1).closed) and  imply (schip(0).x&gt;=2 and schip(0).x&lt;=3)</formula>
			<comment>Hoe lang blijft schip in sluis</comment>
		</query>
		<query>
			<formula>A[] pomp.aan imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoelang blijft pomp bezig</comment>
		</query>
		<query>
			<formula>A[] (pomp.idle imply A&lt;&gt; pomp.pomp_uit)  imply (A&lt;&gt;  systemtime&gt;=2 ) || (A&lt;&gt;  systemtime&lt;=3)</formula>
			<comment>Hoe snel gaat pomp uit
A[] pomp.idle --&gt; pomp.pomp_uit  imply (systemtime&gt;=2 and systemtime&lt;=3)
A[] (p imply A&lt;&gt; q)

A[] (pomp.idle --&gt; imply A&lt;&gt; pomp.pomp_uit)  imply (A&lt;&gt;  systemtime&gt;=2 ) || (A&lt;&gt;  systemtime&lt;=3)
of
A[] (pomp.idle imply A&lt;&gt; pomp.pomp_uit)  imply (A&lt;&gt;  systemtime&gt;=2 ) || (A&lt;&gt;  systemtime&lt;=3)
A&lt;&gt; pomp.pomp_uit  imply (A&lt;&gt;  systemtime&gt;=2)
A&lt;&gt; pomp.pomp_uit  imply (A&lt;&gt;  systemtime&lt;=3)</comment>
		</query>
		<query>
			<formula>A[] sluis.list[0] == 0 </formula>
			<comment>Wanneer is sluis actief


Voor alle paden geldt dat er maximaal 2 schepen in de sluis zijn.
A[] sluis.list[sluis.N] == 0 
A[] sluis.list &lt;= 2
A[] (sluis.list[0] + sluis.list[1]) &lt;= 2
A[] !deadlock
A[] not (Sluis.Tussenstop5 &amp;&amp; Deur.Klaar_voor_uitvaart)
A[]  (Sluis.Voorbereiden imply Deur.Dicht)
A[]  (Deur.Dicht imply Counter==0)
A[]  (Buitenstoplicht.Groen imply invaren_allowed==true)
A[] ! (Binnenstoplicht.Groen imply invaren_allowed==false)
A[]  (globale_tijd&gt;30)
E&lt;&gt;  (Schip.Stoppen and (Counter &gt;5))
A[] (Schip.Vertrekken imply Sluisdeur.Dicht)
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; sluis.add</formula>
			<comment>Sluiskolk kan (and store in queue) invarende schepen ontvangen.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen
			</formula>
			<comment>schip 0 kan de locatie bereiken om te varen
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(1).varen
			</formula>
			<comment>schip 1 kan de locatie bereiken om te varen
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen and schip(1).idle
			</formula>
			<comment>schip 0 varen terwijl schip 1 aan het wachten is</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen and (forall (i : id_t) i != 0 imply schip(i).idle)</formula>
			<comment>schip 0 kan varen terwijl andere schepen aan het wachten zijn</comment>
		</query>
		<query>
			<formula>===== Safety Properties:</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : kenteken) forall (j : kenteken) schip(i).varen &amp;&amp; sluis.list[j] imply i == j</formula>
			<comment>Tijgelijkertijd kan er kunnen meer dan één schip invaren</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_s) forall (j : id_s) stoplight(i).groen &amp;&amp; stoplight(j).groen imply i == j</formula>
			<comment>Het is nooit mogelijk dat beide stoplichten op groen staan</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_d) forall (j : id_d) deur(i).open &amp;&amp; deur(j).open imply i == j</formula>
			<comment>Het is nooit mogelijk dat beide deuren open zijn.

			</comment>
		</query>
		<query>
			<formula>A[] proc1.process_busy==false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] proc2.process_busy==false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] proc1.OpeningHigh imply sluisToggle=true,process_busy=false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] proc1.OpeningLow  imply sluisToggle=true,process_busy=false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] proc2.ClosingHigh imply sluisToggle=true,process_busy=false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] proc2.ClosingLow imply sluisToggle=true,process_busy=false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen and (forall (i : kenteken) i != 0 imply schip(i).idle)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>===== Liveness Properties:
			</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(0).rood imply schip(0).idle imply systemtime &lt;=50</formula>
			<comment>Als een stoplicht rood is, dan zal het schip uiteindelijk gaan wachten.
A[] (p imply A&lt;&gt; q)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(0).groen imply schip(0).varen</formula>
			<comment>Als een stoplicht groen is, dan zal het schip uiteindelijk gaan varen.
A[] (p imply A&lt;&gt; q)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(1).rood imply schip(1).idle</formula>
			<comment>Als een stoplicht rood is, dan zal het schip uiteindelijk gaan wachten
A[] (p imply A&lt;&gt; q)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(0).groen imply schip(0).varen</formula>
			<comment>Als een stoplicht rood is, dan zal het schip uiteindelijk gaan wachten.
A[] (p imply A&lt;&gt; q)</comment>
		</query>
		<query>
			<formula>A[] not ((deur(0).open || deur(1).open) imply pomp.aan)</formula>
			<comment>Er is in elk pad geen state waarbij een van de deuren open is en een pomp aan is
A[] (p imply A&lt;&gt; q)</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (waterlevel==0) or (waterlevel==5)</formula>
			<comment>Het water kan ooit 0 zijn maar ook 5</comment>
		</query>
		<query>
			<formula>==== Time interval checking:</formula>
			<comment>


E&lt;&gt; (Receiver.FIN and timevalid==1 and g&lt;maxtime)
A[] (Receiver.FIN and timevalid==1 and g&gt;=maxtime)

A[] now&gt;=200 imply(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=150 imply (Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=110 imply
(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=127 imply
(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=126 imply
(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] Obs.taken imply (x&gt;=2 and x&lt;=3) to show that the transition is taken when x is in
the interval [2, 3].
• E&lt;&gt; Obs.idle and x&gt;2 : it is possible to take the transition with x in the interval (2, 3].
• A[] Obs.idle imply x&lt;=3 : to show that the upper bound is respected.
The former property E&lt;&gt; Obs.idle and x&gt;3 no longer holds.


https://www.it.uu.se/research/group/darts/uppaal/small_tutorial.pdf
https://arxiv.org/pdf/2211.03817.pdf



Recall the Train Crossing example of the
previous section. The following queries estimates the
probabilities that Train(0) and Train(5) will be in the
crossing before 100 time-units:

Fig. 9: The cumulative probability distribution of
Pr[&lt;=T](&lt;&gt; Train(5).Cross).
Pr[&lt;=100](&lt;&gt; Train(0).Cross)
Pr[&lt;=100](&lt;&gt; Train(5).Cross)
https://dial.uclouvain.be/pr/boreal/object/boreal:211928/datastream/PDF_01/view


Example 3. In the Train Gate example, it might be sufficient to confirm that the probability that Train(5)
reaches the crossing within 100 time-units is larger than
that of Train(0). Posing the query:

Pr[&lt;=100](&lt;&gt;Train(5).Cross) &gt;=
Pr[&lt;=100](&lt;&gt;Train(0).Cross)


Example 4. As an interesting property of the Train Crossing example, we want to know the average of the maximum number of trains that are stopped within the first
20 time-units:
E[&lt;=20; 20000](max: sum(i:id_t) Train(i).Stop)
https://dial.uclouvain.be/pr/boreal/object/boreal:211928/datastream/PDF_01/view




reachability
http://lmf.di.uminho.pt//ac-1718/slides/AC1718-4-Uppaal1.pdf



http://www2.ing.unipi.it/~a008669/didattica/FMSS2021/FormalMethods5.pdf



http://www2.imm.dtu.dk/courses/02917/03-UPPAAL.pdf




http://uu.diva-portal.org/smash/get/diva2:116821/FULLTEXT01.pdf
</comment>
		</query>
		<query>
			<formula>==== Other property checks</formula>
			<comment></comment>
		</query>
		<query>
			<formula>==== More info</formula>
			<comment>• A[] Obs.taken imply (x&gt;=2 and x&lt;=3) to show that the transition is taken when x is in
the interval [2, 3].
• E&lt;&gt; Obs.idle and x&gt;2 : it is possible to take the transition with x in the interval (2, 3].
• A[] Obs.idle imply x&lt;=3 : to show that the upper bound is respected.
• A[] Obs.taken imply x&gt;=2 : all fall-down of the clock value (see curve) are above 2. This
query means: for all states, being in the location Obs.taken implies that x&gt;=2.
• E&lt;&gt; Obs.idle and x&gt;3 : this is for the waiting period, you can try values like 30000 and
you will get the same result. This question means: is it possible to reach a state where Obs
is in the location idle and x&gt;3.
• E&lt;&gt; P0.S1 and P0.x&gt;0 : it is possible to wait in S1 of P0.
• A[] P1.S1 imply P1.x==0 : it is not possible to wait in S1 of P1.
• E&lt;&gt; p: there exists a path where p eventually holds.
• A[] p: for all paths p always holds.
• E[] p: there exists a path where p always holds.
• A&lt;&gt; p: for all paths p will eventually hold.
• p --&gt; q: whenever p holds q will eventually hold.
https://www.it.uu.se/research/group/darts/uppaal/small_tutorial.pdf
https://hal.science/hal-01149806/document
https://fmt.ewi.utwente.nl/media/2.pdf
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7242053/
A[] ( heart_sub.FLATLINE =&gt; (wasSwitchedOff == 1) )
A[] ( heart_Sub.AfterAContraction =&gt; A&lt;&gt; heart_Sub.AfterVContraction )
https://www.brics.dk/RS/01/11/BRICS-RS-01-11.pdf
Safety: Never overflow.
 A[] forall(i:id_t) level[i] &lt;= capa[i]
 Validation/Reachability: How to get 1 unit.
 E&lt;&gt; exists(i:id_t) level[i] == 1
http://www2.imm.dtu.dk/courses/02917/03-UPPAAL.pdf
https://www.academia.edu/6785640/UPPAAL_a_Tool_Suite_for_Automatic_Verification_of_Real_Time_Systems
https://scholarlypublications.universiteitleiden.nl/access/item%3A2899970/view
A[] not ((t1==0 or t1==50) and Place1.State2 and Place2.State2)
A□ (firstquadrant → inrange)
. E♢ (x &lt; 0 ∧ y &gt; 0)
A□ (firstquadrant → inrange ∨ M.STOP)
http://www.infsoc.org/journal/vol06/IJIS_06_2_079-087.pdf
E&lt;&gt; Viking1==safe and Viking2==safe
and Viking3==safe and Viking4==safe
and globaltime&lt;=60
https://researchbank.swinburne.edu.au/file/63841fed-2702-40ac-9d06-477ad313983b/1/PDF%20(Published%20version).pdf
A [] (( k3_sw . K3WontClose &amp;&amp; BypAvailable &amp;&amp; State . InvSyncingState ) imply ( K5_closed &amp;&amp; BypassSCRCommand ))

State . InvOnLineState &amp;&amp; CloseK3Command &amp;&amp; k3_sw . OpenSpuriously &amp;&amp; BypAvailable −−&gt; k3_sw .c &lt;= 20 &amp;&amp; K5_closed &amp;&amp; BypassSCRCommand
A [] ( CloseK3Command &amp;&amp; ( k3_sw . OpenSpuriously || k3_sw . Opened ) &amp;&amp; ! BypAvailable imply ! BypassSCRCommand )
A [] !( k3 . K3WontOpen &amp;&amp; InvOn )
A [] ( k5 . FailToClose &amp;&amp; ! ACOVActive &amp;&amp; ! ACUVActive &amp;&amp; ! DCLinkOV &amp;&amp; State . InvOnLineState ) imply ( InvOn &amp;&amp; K3ClosedDebounced )
k5 . FailToClose −−&gt; ! BypAvailableA [] ( k5_hw . Closed &amp;&amp; ! K5_closed &amp;&amp; ! CloseK3Command &amp;&amp;BypAvailable imply BypassSCRCommand )

( acuvov . AlarmActive &amp;&amp; BypAvailable ) −−&gt;( acuvov . Timer &lt;= 5 &amp;&amp; BypassSCRCommand &amp;&amp;( K5_closed || k5 . Closing ))


( acuvov . AlarmActive &amp;&amp; ! BypAvailable ) −−&gt; (! BypassSCRCommand &amp;&amp; ! K5_closed &amp;&amp; ! K3ClosedDebounced &amp;&amp; acuvov . Timer &lt;= 3000)

( BypassSCRCommand &amp;&amp; ! ACOVActive &amp;&amp; ! ACUVActive &amp;&amp; ! DCLinkOV ) −−&gt; ( CloseK3Command &amp;&amp; InvOn )

A [] !( DCLinkOV &amp;&amp; BypassACOV &amp;&amp; BypassSCRCommand &amp;&amp; K5_closed )

( etb . dcov &amp;&amp; BypAvailable &amp;&amp; ! BypassACOV ) −−&gt;( BypassSCRCommand &amp;&amp; K5_closed )

https://aaltodoc.aalto.fi/bitstream/handle/123456789/906/isbn9789526031033.pdf?sequence=1
https://core.ac.uk/download/pdf/80715679.pdf
https://www.cs.vu.nl/~wanf/theses/karstens-mscthesis.pdf

E✸ Station1.NormalOperation and Station2.NormalOperation
E ✸Station1.activemovement
A✷ not (Station1.activemovement and Station2.activemovement)
A✷ not deadlock
A✷ (Interface1.inUP and Interface2.inSBY) imply (Station1.activemovement
and Station2.passivemovement)
Interface1.inUP and Interface2.inSBY → Station1.activemovement and
Station2.passivemovement
A ✷ liveness2.bad
E ✸ liveness2.bad
E ✸ safety1.bad
E ✸ visitmovement&gt;=1</comment>
		</query>
	</queries>
</nta>
