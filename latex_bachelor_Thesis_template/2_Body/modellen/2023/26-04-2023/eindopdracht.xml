<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
// examples v1_12_06_2022 
// examples v1_13_06_2022 

// List one or more processes to be composed into a system.
//system schip,aanvoer,afvoer;
 
//system pomp,pompbediening;   
// for more uppaal documentation https://docs.uppaal.org/language-reference/expressions/

/** Requirementsoverzicht
 * Een sluis heeft deuren voor openenen en sluiten.
 * Een sluis heeft stoplichten met rood en groen waarmee toestemming al dann wel neit wordt gegeven voor schepen voor invaren of uitvaren.
 * Een schip heeft een positie en een doel
 * Een schip kan zich aanmelden
 * De pompbediening handelt de aanvraag van invarende, wachtende en uitvarende schepen af
 * Een schip kan in een wachtrij staan voodat hij een sluis invaart beneden.
 * Een schip kan in een wachtrij staan voodat hij een sluis invaart boven.
 * Een schip kan in een wachtrij staan voordat deze een sluis verlaat.
 * Als een sluis vol is komt een schip automatisch in een wachtrij.
 * Een sluis heeft een pomp(nivelleeersystseem) voor  hoog, midden, laag.
 * Een sluis houdt bij hoeveel schepen invaren.
 * Een sluis houdt bij wat de waterstand is.
 *
 * Scenario
 * Vanuit idle wordt er een schip toegevoegd aan de wachtrij boven of beneden. De sluis blijft in de wacthmodus totdat de wachtrij boven of beneden vol is.
 * 
*/

clock realtime,systemtime;
bool entrance_schip,schip_boven=true,schip_beneden=false;
bool direction = false;
const int deuren = 2;
typedef int[0,deuren-1] deur;
bool gate_is_open[deur];
chan open_gate[deur];
chan close_gate[deur];


chan start_stoplicht_uitvaren;
chan stop_stoplicht_uitvaren;
chan start_stoplicht_invaren;
chan stop_stoplicht_invaren;

bool sluisToggle = false;
bool sluisIsBezig = false;


chan pomp_klik;
chan schipklik;
chan stoplichtklik;
chan deurklik;
//typedef int[0,10] meter;
//meter waterlevel;
const int MAX_schepen=3;
typedef int[0,MAX_schepen-1] kenteken;
const int aantal_stoplichten=4;
typedef int[0,aantal_stoplichten-1] stoplicht;
//chan send[0,1],receive[0,1];
int[-1,10] waterlevel=0;
chan notified_pomp_direction;
// aantal queues voor wachtrij beneden,  de wachtrij boven en  aantal schepen in de sluis
const int aantal_wachtrijen=3;
typedef int[0,aantal_wachtrijen-1] queue_of_ships;
const int SIZE=3;
//queue_of_ships stack[SIZE];
//int myarray[3] := {stack[SIZE], stack[SIZE], stack[SIZE]};
int wachtrij_beneden[SIZE];
//int stack[SIZE];
int wachtrij_boven[SIZE];
//int[0, 2] myarray[stack[SIZE]];
int[-1,6] mystack[SIZE];
//int queues[queue];
typedef int[0, aantal_wachtrijen-1] que;
int queues[que];

int[-1,6] waterniveau = 0;

int[0,1] gatenr;
/////

const int aantal_queues=3;
typedef int[0, aantal_queues-1] queue;

// identifier voor wachtrij
typedef int[0, aantal_queues-1] id_q;

// identifier voor deuren
const int aantal_deuren=2;

typedef int[0, aantal_queues-1] id_d;


// identifier voor stoplichten


typedef int[0, aantal_stoplichten-1] id_s;



// identifier voor deuren
const int aantal_sensoren=4;
typedef int[0, aantal_sensoren-1] id_sensor;
//typedef int[0,SIZE_STACK-1] stack;
/**
const int pompen = 2;
typedef int[0,pompen-1] pomp;

// True is de bovenste gate, false is de onderste




chan boot_aanwezig;

chan toggle_pomp[pomp];


//int queues[queue];




*/

 clock x;</declaration>
	<template>
		<name>maincontroller</name>
		<declaration>// een schip kan zich anamelden bij de sluis(control system); een machine; deze voert bewerkingen uit op de omgeving met informatie van de beheerder
// de sluis bedient de waterpomp,sluisdeur,stoplicht,aanvoer en afvoer van schepen

/** stack
 * de lengte van de datastructuur
*/
const int time_step = 2;




/**
 *
*/
int[0,SIZE] head =0;

/** pop
 *
*/
kenteken pop_left()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}


kenteken pop_center()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}

kenteken pop_right()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}


/** push
 *
*/
void push(kenteken p)
{
    //stack[head++]=p;
}


/** isFull
 *
*/
bool isFull()
{
    return (head==SIZE);
}


/** isEmpty
 *
*/
bool isEmpty()
{
 return (head ==0);
}

void reset()
{}</declaration>
		<location id="id0" x="-280" y="0">
			<name x="-290" y="-34">idle</name>
			<label kind="comments" x="-875" y="93">Check realtime clock. Luster naar signalen van de sensors boven en beneden.
Check of sluis leeg is.
Indien sluis niet leeg is dan werk afmaken.
Als sluis leeg is dan positie wachtend schip.
Pomp water in/uit de sluis.
Sluisdeur open.
Stoplcht groen uitvaren.
Schepen laten uitvaren.
Stoplicht rood uitvaren.
Stoplicht groen invaren.
Schepen laten invaren.
Stoplicht rood invaren.
Sluisdeuren sluiten.</label>
		</location>
		<location id="id1" x="442" y="0">
			<label kind="comments" x="569" y="136">verwijder uit de sluiskolk en voeg toe aan de array voor schepen in de wachtrij of beschouw als uuitvarend

To DO
Een uitvarend schip kan niet  worden toegevoegd aan de lijst met wachtende schepen.</label>
		</location>
		<location id="id2" x="884" y="0">
			<name x="892" y="25">empty_queue</name>
			<label kind="invariant" x="901" y="51">queues[direction]&gt;=0 &amp;&amp; x&lt;=time_step</label>
		</location>
		<location id="id3" x="136" y="-136">
			<name x="126" y="-170">water_omhoog</name>
			<label kind="invariant" x="280" y="-187">waterniveau&gt;=0&amp;&amp;x&lt;=time_step</label>
		</location>
		<location id="id4" x="136" y="221">
			<name x="119" y="229">water_omlaag</name>
			<label kind="invariant" x="110" y="255">waterniveau&lt;=5&amp;&amp;x&lt;=time_step</label>
		</location>
		<location id="id5" x="-85" y="0">
			<name x="-95" y="-34">deur_check</name>
			<label kind="comments" x="-95" y="59">verwijder uit de wachtrij en voeg toe aan de array voor schepen in de sluiskolk


myarray[0][0]++,queues[!direction]--, queues[2]++</label>
		</location>
		<location id="id6" x="-178" y="0">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="-262" y="-34">direction</label>
			<nail x="-187" y="0"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="477" y="-17">open_gate[direction]!</label>
			<nail x="459" y="0"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-67" y="187">!direction</label>
			<nail x="-85" y="221"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-67" y="-170">direction</label>
			<nail x="-85" y="-17"/>
			<nail x="-85" y="-136"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-440" y="-22">realtime==21</label>
			<label kind="comments" x="-356" y="8">update:
reset()</label>
			<nail x="-374" y="-34"/>
			<nail x="-374" y="68"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="527" y="272">queues[direction]&lt;=0&amp;&amp;sluisToggle</label>
			<label kind="synchronisation" x="527" y="289">close_gate[direction]!</label>
			<label kind="assignment" x="527" y="306">direction=!direction, sluisToggle:=false</label>
			<nail x="883" y="34"/>
			<nail x="883" y="340"/>
			<nail x="-170" y="340"/>
			<nail x="-170" y="42"/>
			<nail x="-102" y="42"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="comments" x="1139" y="-34">guard:
sluisToggle==false &amp;&amp; queues[direction]&lt;=0
sync:
close_gate[direction]!
update:
sluisIsBezig:=false, queues[!direction] := 0

update:myarray[direction]++</label>
			<nail x="1019" y="0"/>
			<nail x="1019" y="-238"/>
			<nail x="-280" y="-238"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="comments" x="425" y="85">gyuard:
waterniveau&gt;=5

sync:

notified_pomp_direction[direction]!
update:</label>
			<nail x="153" y="221"/>
			<nail x="442" y="221"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="assignment" x="102" y="119">waterniveau--, x:=0</label>
			<nail x="102" y="162"/>
			<nail x="170" y="162"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="assignment" x="119" y="-68">waterniveau++, x:=0</label>
			<nail x="170" y="-68"/>
			<nail x="102" y="-68"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="comments" x="154" y="-111">select:

guard:
waterniveau==0


sync:
notified_pomp_direction[direction]!


update:</label>
			<nail x="442" y="-136"/>
		</transition>
	</template>
	<template>
		<name>gate</name>
		<parameter>id_d d</parameter>
		<declaration>
// parameter: const gatenr gatenummer
clock x;
int[0,1] currentstate;</declaration>
		<location id="id7" x="0" y="0">
		</location>
		<location id="id8" x="306" y="0">
			<name x="296" y="-34">closing</name>
		</location>
		<location id="id9" x="306" y="-204">
			<name x="296" y="-238">open</name>
		</location>
		<location id="id10" x="0" y="-204">
			<name x="-10" y="-238">opening</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="assignment" x="18" y="0">gate_is_open[entrance_schip] := false</label>
			<nail x="289" y="0"/>
			<nail x="280" y="0"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="306" y="-119">deurklik!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="60" y="-238">currentstate==entrance_schip</label>
			<label kind="assignment" x="60" y="-204">gate_is_open[entrance_schip] := true, x:=0</label>
			<nail x="42" y="-204"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="0" y="-136">deurklik!</label>
			<nail x="0" y="-34"/>
		</transition>
	</template>
	<template>
		<name>schip</name>
		<parameter>kenteken id</parameter>
		<declaration>

// const kenteken schipid
int positie =0;
clock x;</declaration>
		<location id="id11" x="0" y="-102">
			<name x="-10" y="-136">ildle</name>
		</location>
		<location id="id12" x="0" y="51">
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<nail x="8" y="51"/>
			<nail x="170" y="51"/>
			<nail x="170" y="-102"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="comments" x="-187" y="-76">sync:
send[kenteken]


update:
positie: int[0,1]</label>
		</transition>
	</template>
	<template>
		<name>pomp</name>
		<declaration>
clock x;


/**
 * de pomp moet aan de hand van een input paranter weten of hij eerst vullen of wegpompen
*/

/**
 *
*/
void functie()
{
	
}

/**
 *
*/
// een constraint op een bepaalde variabele
bool isForMe()
{
	//if(pompnr &lt; 2 &amp;&amp; waterlevel&lt;6) return true;
	//else if(pompnr&gt;1 &amp;&amp; waterlevel&gt;=6) return true;
	 return false;
}

/**
 *
*/
//pomp omlaag
bool isLaag()
{
	//if(pompnr &lt; 2 &amp;&amp; waterlevel&lt;6) return true;
	//else
    return false;
}

/**
 *
*/
//pomp omhoog
bool isHoog()
{
    //if(pompnr&gt;1 &amp;&amp; waterlevel&gt;=6) return true;
	//else return false;
 return false;
}

</declaration>
		<location id="id13" x="0" y="0">
			<name x="-10" y="-34">pomp_uit</name>
			<label kind="comments" x="-620" y="93">ipv aan en uit states kan er ook gekozen worden voor de states laag en hoog</label>
		</location>
		<location id="id14" x="102" y="136">
			<name x="92" y="102">pomp_aan</name>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="18" y="119">pomp_klik!</label>
			<nail x="0" y="136"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="52" y="-17">pomp_klik!</label>
			<nail x="34" y="0"/>
			<nail x="102" y="0"/>
		</transition>
	</template>
	<template>
		<name>sluiskolk</name>
		<declaration>
// parameter: const stack  q

bool is_full()
{
    return false;
}


void dequeues()
{
}


void enqueue()
{
}

bool is_empty()
{
    return false;
}

bool go_out()
{
    return false;
}


bool lock_empty()
{
    return false;
}


chan lock_full;

chan to_lock;
//chan go_out;</declaration>
		<location id="id15" x="-136" y="68">
			<name x="-146" y="34">idle</name>
		</location>
		<location id="id16" x="0" y="68">
		</location>
		<location id="id17" x="136" y="68">
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="comments" x="-84" y="195">guard:
!is_empty()

sync:
lock_empty()


update:</label>
			<nail x="102" y="170"/>
			<nail x="-102" y="170"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="comments" x="306" y="17">guard:


sync:
!is_empty()

update:
dequeues()</label>
			<nail x="204" y="-34"/>
			<nail x="204" y="136"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="comments" x="51" y="-102">guard:


sync:
go_out?
update:</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-118" y="34">is_full()</label>
			<label kind="synchronisation" x="-118" y="51">lock_full!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="guard" x="-306" y="42">!is_full()</label>
			<label kind="comments" x="-186" y="42">Guard:



sync:
to_lock[i]?

Update:

enqueue(i)</label>
			<nail x="-204" y="-34"/>
			<nail x="-204" y="136"/>
		</transition>
	</template>
	<template>
		<name>Wachtrij</name>
		<parameter>id_q q</parameter>
		<declaration>

clock x;</declaration>
		<location id="id18" x="0" y="0">
			<name x="-10" y="-34">idle</name>
		</location>
		<location id="id19" x="119" y="0">
			<name x="109" y="-34">add</name>
		</location>
		<location id="id20" x="238" y="0">
			<name x="228" y="-34">release</name>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="guard" x="-84" y="-97">x&gt;=2</label>
			<label kind="assignment" x="-84" y="-63">x:=0</label>
			<nail x="-34" y="-25"/>
			<nail x="-102" y="-68"/>
			<nail x="-102" y="68"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="guard" x="273" y="-84">x&lt;2</label>
			<nail x="272" y="-25"/>
			<nail x="340" y="-68"/>
			<nail x="340" y="68"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<nail x="238" y="25"/>
			<nail x="238" y="102"/>
			<nail x="0" y="102"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<nail x="136" y="0"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<nail x="34" y="0"/>
		</transition>
	</template>
	<template>
		<name>stoplight</name>
		<parameter>id_s s</parameter>
		<declaration>// stoplicht 0
// stoplicht 1
// stoplicht 2
// stoplicht 3</declaration>
		<location id="id21" x="0" y="0">
			<name x="-10" y="-34">rood</name>
		</location>
		<location id="id22" x="272" y="0">
			<name x="262" y="-34">groen</name>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="93" y="-42">stoplichtklik?</label>
			<nail x="34" y="0"/>
			<nail x="170" y="0"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<nail x="272" y="136"/>
			<nail x="0" y="136"/>
		</transition>
	</template>
	<template>
		<name>sensor</name>
		<parameter>id_sensor s</parameter>
		<declaration>chan send, receive;</declaration>
		<location id="id23" x="0" y="0">
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="select" x="144" y="-51">send_ais : kenteken</label>
			<label kind="synchronisation" x="102" y="-93">send!</label>
			<nail x="51" y="-102"/>
			<nail x="119" y="-42"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="select" x="-272" y="-76">received_ais : kenteken</label>
			<label kind="synchronisation" x="-85" y="-119">receive?</label>
			<nail x="-8" y="-8"/>
			<nail x="-68" y="-68"/>
			<nail x="0" y="-102"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();
// List one or more processes to be composed into a system.
system maincontroller,gate,pomp,schip,sensor,stoplight;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
