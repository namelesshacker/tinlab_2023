<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
// examples v1_12_06_2022 
// examples v1_13_06_2022 

// List one or more processes to be composed into a system.
//system schip,aanvoer,afvoer;
 
//system pomp,pompbediening;   
// for more uppaal documentation https://docs.uppaal.org/language-reference/expressions/

/** Requirementsoverzicht
 * Een sluis heeft deuren voor openenen en sluiten.
 * Een sluis heeft stoplichten met rood en groen waarmee toestemming al dann wel neit wordt gegeven voor schepen voor invaren of uitvaren.
 * Een schip heeft een positie en een doel
 * Een schip kan zich aanmelden
 * De pompbediening handelt de aanvraag van invarende, wachtende en uitvarende schepen af
 * Een schip kan in een wachtrij staan voodat hij een sluis invaart beneden.
 * Een schip kan in een wachtrij staan voodat hij een sluis invaart boven.
 * Een schip kan in een wachtrij staan voordat deze een sluis verlaat.
 * Als een sluis vol is komt een schip automatisch in een wachtrij.
 * Een sluis heeft een pomp(nivelleeersystseem) voor  hoog, midden, laag.
 * Een sluis houdt bij hoeveel schepen invaren.
 * Een sluis houdt bij wat de waterstand is.
 *
 * Scenario
 * Vanuit idle wordt er een schip toegevoegd aan de wachtrij boven of beneden. De sluis blijft in de wacthmodus totdat de wachtrij boven of beneden vol is.
 * Error handling
 * Pomp
 * Een pomp mag niet meer water bijpompen dan het maximum.
 * Een pomp mag niet meer  water wegpompen dan onder het NAP\
 * Stoplicht
 * Er mag niets mis gaan emt de stoplichten anders kunnen er botsingen voorkomen
 * Deur
 * Een deur moet binnen 30 seconden open en dicht anders wordt er een foutmelding gestuurd.
*/


//chan start;

//clock realtime;
//bool entrance_schip,schip_boven=true,schip_beneden=false;
bool direction = 0;
bool process_busy = false;
//bool process_finished = false;
//bool on=false, off=false;
//const int deuren = 2;
//typedef int[0,deuren-1] deur;
//bool gate_is_open[deur];
//int countCycle=0;


chan initOpenProc,initClosingProc;

//bool togglePomp = false;
//bool startDown =false;
//bool startUp= true;
bool position=0;




bool sluisToggle = false;
bool sluisIsBezig = false;
//bool lockOpen = false;
//int[-1,6] waterniveau = 0;




//typedef int[0,10] meter;
//meter waterlevel;
int[-10,10] waterlevel=0;


// identifier voor schepen
const int MAX_schepen=1;
typedef int[0,MAX_schepen-1] kenteken;
chan schipklik[kenteken];
chan register[kenteken];
chan unregister[kenteken];
//chan send[0,1],receive[0,1];

chan notified_pomp_direction;


// identifier voor wachtrij
// aantal queues voor wachtrij beneden,  de wachtrij boven en  aantal schepen in de sluis
const int aantal_wachtrijen=3;

const int SIZE=3;
//queue_of_ships stack[SIZE];
//int myarray[3] := {stack[SIZE], stack[SIZE], stack[SIZE]};
//int wachtrij_beneden[SIZE];
//int stack[SIZE];
//int wachtrij_boven[SIZE];
//int[0, 2] myarray[stack[SIZE]];
//int queues[queue];


const int aantal_queues=1;
//typedef int[0, aantal_queues-1] queue;// goed
typedef int[0, aantal_queues-1] id_q; // ook goed
//typedef int[0, aantal_wachtrijen-1] que; // ook goed
//typedef int[0,aantal_wachtrijen-1] queue_of_ships; // ook goed
//int[-1,6] mystack[SIZE]; // size is minimaal -1 en max gelijk aan 6 ?? Is dit een fout in Uppaal waar me rekening mee moeten houden in geval van state explosion???
//int queues[que];



// identifier voor deuren
int[0,1] gatenr;
const int aantal_deuren=1;
typedef int[0, aantal_deuren] id_d;
//const int deuren = 2;
//typedef int[0,deuren-1] deur;
//bool deur_is_open[id_d];
//chan deur_openen[id_d];
//chan deur_sluiten[id_d];
//bool deur_is_gesloten[id_d];
//chan open_gate[id_d];
//chan close_gate[id_d];
chan deurklik[id_d];


// identifier voor stoplichten
// id=0 invaren beneden
// id=1 uitvaren beneden
// id=2 uitvaren boven
// id=3  invaren boven
const int aantal_stoplichten=2;
typedef int[0,aantal_stoplichten-1] stoplicht;
typedef int[0, aantal_stoplichten-1] id_s;
chan stoplichtklik[id_s];
//chan start_stoplicht_uitvaren[id_s];
//chan stop_stoplicht_uitvaren[id_s];
//chan start_stoplicht_invaren[id_s];
//chan stop_stoplicht_invaren[id_s];



// identifier voor sensoren
//const int aantal_sensoren=4;
//typedef int[0, aantal_sensoren-1] id_sensor;
//typedef int[0,SIZE_STACK-1] stack;
/**
*/


//const int pompen = 1;
//typedef int[0,pompen-1] pomp_id;
chan pomp_klik;
//chan boot_aanwezig;
//chan toggle_pomp[pomp_id];



//chan send[kenteken], receive[kenteken];

//const int positions=2;
//typedef int[0,positions-1] locatie;
//chan shipTrigger[locatie];
 clock x;
clock systemtime;
//clock processtime;

//chan	done, ready, run, stop;</declaration>
	<template>
		<name>proc1</name>
		<declaration> clock x;</declaration>
		<location id="id0" x="136" y="-340">
			<name x="126" y="-374">r3</name>
		</location>
		<location id="id1" x="136" y="-612">
			<name x="126" y="-646">r5</name>
		</location>
		<location id="id2" x="25" y="-340">
			<name x="15" y="-374">r2</name>
		</location>
		<location id="id3" x="-102" y="-340">
			<name x="-112" y="-374">OpeningLow</name>
		</location>
		<location id="id4" x="-646" y="-442">
			<name x="-656" y="-476">l4</name>
		</location>
		<location id="id5" x="-646" y="-612">
			<name x="-656" y="-646">l5</name>
		</location>
		<location id="id6" x="-646" y="-340">
			<name x="-656" y="-374">l3</name>
		</location>
		<location id="id7" x="-510" y="-340">
			<name x="-520" y="-374">l2</name>
		</location>
		<location id="id8" x="-408" y="-340">
			<name x="-425" y="-399">OpeningHigh</name>
		</location>
		<location id="id9" x="-238" y="-442">
			<name x="-248" y="-476">idle</name>
		</location>
		<location id="id10" x="-646" y="-612">
		</location>
		<location id="id11" x="-646" y="-612">
		</location>
		<location id="id12" x="-238" y="-340">
			<name x="-248" y="-374">s0</name>
		</location>
		<location id="id13" x="136" y="-442">
			<name x="126" y="-476">r4</name>
		</location>
		<location id="id14" x="-408" y="-612">
			<name x="-418" y="-646">l6</name>
		</location>
		<location id="id15" x="-102" y="-612">
			<name x="-112" y="-646">r6</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="select" x="43" y="-391">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="76" y="-331">stoplichtklik[position]!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-221" y="-586">pomp_klik!</label>
			<label kind="assignment" x="-136" y="-501">sluisToggle=true,process_busy=false</label>
			<label kind="comments" x="-170" y="-714">select:
guard
sync:
update:</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id15"/>
			<label kind="select" x="-51" y="-637">deur_id:id_d</label>
			<label kind="synchronisation" x="-84" y="-629">deurklik[position]!</label>
			<label kind="comments" x="-42" y="-714">select:
guard
sync:deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-357" y="-586">pomp_klik!</label>
			<label kind="assignment" x="-408" y="-493">sluisToggle=true,process_busy=false</label>
			<label kind="comments" x="-409" y="-765">select:
guard
sync:
update:</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="select" x="-603" y="-654">deur_id:id_d</label>
			<label kind="synchronisation" x="-628" y="-629">deurklik[position]!</label>
			<label kind="comments" x="-620" y="-731">select:
guard
sync: deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id1"/>
			<label kind="select" x="8" y="-578">shipid: kenteken</label>
			<label kind="synchronisation" x="0" y="-544">register[shipid]!</label>
			<label kind="comments" x="229" y="-561">select:
guard:position==1 &amp;&amp; systemtime&gt;0900
sync:schipklik[shipid]!
update:</label>
			<nail x="136" y="-476"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id13"/>
			<label kind="select" x="136" y="-442">shipid: kenteken</label>
			<label kind="synchronisation" x="136" y="-408">schipklik[shipid]!</label>
			<label kind="comments" x="246" y="-348">select:
guard
sync:open_gate[direction]!
update:</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-68" y="-331">stoplichtklik[position]!</label>
			<label kind="comments" x="17" y="-314">select:
guard
sync:deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="select" x="-646" y="-578">shipid:kenteken</label>
			<label kind="synchronisation" x="-646" y="-544">register[shipid]!</label>
			<label kind="comments" x="-960" y="-663">select:
guard:position==0 &amp;&amp; systemtime&gt;0900
sync:schipklik[shipid]!
update:

select:
guard
sync:register[shipid]!
update:</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="select" x="-646" y="-442">shipid: kenteken</label>
			<label kind="synchronisation" x="-646" y="-408">schipklik[shipid]!</label>
			<label kind="comments" x="-841" y="-425">select:
guard
sync: open_gate[direction]!
update:</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-578" y="-340">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="-595" y="-314">stoplichtklik[position]!</label>
			<label kind="comments" x="-790" y="-238">select:
guard:systemtime &lt;0900
sync:stoplichtklik[stoplichtnummer]!
update:</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-492" y="-357">stoplichtklik[position]!</label>
			<label kind="comments" x="-552" y="-246">select:deur_id:id_d
guard
sync:deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="guard" x="-212" y="-425">process_busy==false</label>
			<label kind="synchronisation" x="-238" y="-408">initOpenProc?</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id3"/>
			<label kind="select" x="-229" y="-365">deurnummer: id_d</label>
			<label kind="guard" x="-246" y="-314">position==1&amp;&amp; systemtime &gt;08</label>
			<label kind="synchronisation" x="-229" y="-340">deurklik[position]!</label>
			<label kind="assignment" x="-229" y="-297">process_busy=true</label>
			<label kind="comments" x="-212" y="-246">select:
guard:systemtime &gt;1245&amp;&amp; systemtime &lt;2100
sync:
update:</label>
			<nail x="-221" y="-340"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="select" x="-382" y="-314">deurnummer: id_d</label>
			<label kind="guard" x="-433" y="-425">position==0 &amp;&amp; systemtime &gt;08</label>
			<label kind="synchronisation" x="-390" y="-357">deurklik[position]!</label>
			<label kind="assignment" x="-390" y="-340">process_busy=true</label>
			<label kind="comments" x="-391" y="-255">select:
guard: systemtime &gt;0845
sync:
update:</label>
		</transition>
	</template>
	<template>
		<name>proc2</name>
		<declaration> clock x;</declaration>
		<location id="id16" x="-54418" y="-187">
			<name x="-54428" y="-221">r2</name>
		</location>
		<location id="id17" x="-54307" y="-187">
			<name x="-54317" y="-221">r3</name>
		</location>
		<location id="id18" x="-54307" y="-459">
			<name x="-54317" y="-493">r5</name>
		</location>
		<location id="id19" x="-54545" y="-187">
			<name x="-54555" y="-221">ClosingLow</name>
		</location>
		<location id="id20" x="-55089" y="-289">
			<name x="-55099" y="-323">l4</name>
		</location>
		<location id="id21" x="-55089" y="-459">
		</location>
		<location id="id22" x="-55089" y="-187">
			<name x="-55099" y="-221">l3</name>
		</location>
		<location id="id23" x="-54952" y="-187">
			<name x="-54962" y="-221">l2</name>
		</location>
		<location id="id24" x="-54851" y="-187">
			<name x="-54868" y="-246">ClosingHigh</name>
		</location>
		<location id="id25" x="-54681" y="-289">
			<name x="-54691" y="-323">idle</name>
		</location>
		<location id="id26" x="-55089" y="-459">
			<name x="-55099" y="-493">l5</name>
		</location>
		<location id="id27" x="-55089" y="-459">
		</location>
		<location id="id28" x="-54681" y="-187">
			<name x="-54691" y="-221">s0</name>
		</location>
		<location id="id29" x="-54307" y="-289">
			<name x="-54317" y="-323">r4</name>
		</location>
		<location id="id30" x="-54851" y="-459">
			<name x="-54861" y="-493">l6</name>
		</location>
		<location id="id31" x="-54545" y="-459">
			<name x="-54555" y="-493">r6</name>
		</location>
		<init ref="id25"/>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="select" x="-54400" y="-238">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="-54408" y="-212">stoplichtklik[direction]!</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-54664" y="-433">pomp_klik!</label>
			<label kind="assignment" x="-54579" y="-348">sluisToggle=true,process_busy=false</label>
			<label kind="comments" x="-54613" y="-561">select:
guard
sync:
update:</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id31"/>
			<label kind="select" x="-54494" y="-484">deur_id:id_d</label>
			<label kind="synchronisation" x="-54527" y="-476">deurklik[direction]!</label>
			<label kind="comments" x="-54485" y="-561">select:
guard
sync:deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-54800" y="-433">pomp_klik!</label>
			<label kind="assignment" x="-54851" y="-340">sluisToggle=true,process_busy=false</label>
			<label kind="comments" x="-54852" y="-612">select:
guard
sync:
update:</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id30"/>
			<label kind="select" x="-55046" y="-501">deur_id:id_d</label>
			<label kind="synchronisation" x="-55071" y="-476">deurklik[direction]!</label>
			<label kind="comments" x="-55063" y="-578">select:
guard
sync: deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id18"/>
			<label kind="select" x="-54435" y="-425">shipid: kenteken</label>
			<label kind="synchronisation" x="-54443" y="-391">unregister[shipid]!</label>
			<label kind="comments" x="-54214" y="-408">select:
guard:position==1 &amp;&amp; systemtime&gt;0900
sync:schipklik[shipid]!
update:</label>
			<nail x="-54307" y="-323"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id29"/>
			<label kind="select" x="-54307" y="-289">shipid: kenteken</label>
			<label kind="synchronisation" x="-54307" y="-255">schipklik[shipid]!</label>
			<label kind="comments" x="-54197" y="-195">select:
guard
sync:open_gate[direction]!
update:</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-54553" y="-212">stoplichtklik[direction]!</label>
			<label kind="comments" x="-54426" y="-161">select:
guard
sync:deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="-55089" y="-425">shipid:kenteken</label>
			<label kind="synchronisation" x="-55089" y="-391">unregister[shipid]!</label>
			<label kind="comments" x="-55403" y="-510">select:
guard:position==0 &amp;&amp; systemtime&gt;0900
sync:schipklik[shipid]!
update:

select:
guard
sync:register[shipid]!
update:</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="select" x="-55089" y="-289">shipid: kenteken</label>
			<label kind="synchronisation" x="-55089" y="-255">schipklik[shipid]!</label>
			<label kind="comments" x="-55284" y="-272">select:
guard
sync: open_gate[direction]!
update:</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="select" x="-55021" y="-187">stoplichtnummer: id_s</label>
			<label kind="synchronisation" x="-55038" y="-161">stoplichtklik[direction]!</label>
			<label kind="comments" x="-55233" y="-85">select:
guard:systemtime &lt;0900
sync:stoplichtklik[stoplichtnummer]!
update:</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-54969" y="-212">stoplichtklik[direction]!</label>
			<label kind="comments" x="-54995" y="-93">select:deur_id:id_d
guard
sync:deurklik[deur_id]!
update:</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id21"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-54655" y="-280">process_busy==false</label>
			<label kind="synchronisation" x="-54655" y="-255">initClosingProc?</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id19"/>
			<label kind="select" x="-54672" y="-136">deurnummer: id_d</label>
			<label kind="guard" x="-54672" y="-144">position==1&amp;&amp; systemtime &gt;08</label>
			<label kind="synchronisation" x="-54663" y="-119">deurklik[direction]!</label>
			<label kind="assignment" x="-54646" y="-187">position=!position,sluisToggle=false,process_busy=true</label>
			<label kind="comments" x="-54655" y="-93">select:
guard:systemtime &gt;1245&amp;&amp; systemtime &lt;2100
sync:
update:</label>
			<nail x="-54664" y="-187"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id24"/>
			<label kind="select" x="-54825" y="-161">deurnummer: id_d</label>
			<label kind="guard" x="-54859" y="-229">position==0 &amp;&amp; systemtime &gt;08</label>
			<label kind="synchronisation" x="-54825" y="-212">deurklik[direction]!</label>
			<label kind="assignment" x="-54893" y="-170">position=!position,sluisToggle=false,process_busy=true</label>
			<label kind="comments" x="-54834" y="-102">select:
guard: systemtime &gt;0845
sync:
update:</label>
		</transition>
	</template>
	<template>
		<name>maincontroller</name>
		<declaration>
/**
 * Requirements
 * Voordat het template de states stoplicht en deur heeft bereikt is de richting van het schip bekend en tegengesteld aan de huidige positie.
 * In de idle stand is het mogeljk dat de clocktijd niet gelijk is aan nul, omdat het systeem alleen op 120 tijdseenheden en 
 * Een pomp is actief als er nul of 1 of 2 schepen in de sluis zitten.
 * De sluis heeft een trigger waarmee een actie kan worden gestart met een preconditie gerelateerd aan 1 van de volgende tenplates:schip,stoplicht,systeemtime,pomp,deur.
 *
 *
*/

/**
clock systemtime;
int  thresholdUp = 0900;
int thresholdDown=1300;




/**
bool waterlockStartPosition()
{

    return false;
}

*/



// een schip kan zich anamelden bij de sluis(control system); een machine; deze voert bewerkingen uit op de omgeving met informatie van de beheerder
// de sluis bedient de waterpomp,sluisdeur,stoplicht,aanvoer en afvoer van schepen

/** stack
 * de lengte van de datastructuur
*/
//const int time_step = 2;




/**
 *
*/
//int[0,SIZE] head =0;

/** pop
 *
*/

/**
kenteken pop_left()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}
*/
/**
kenteken pop_center()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}
*/
/**
kenteken pop_right()
{
    kenteken temp;
    //temp=stack[--head]; // neem de head voordat we de waarde uitlezen
    //stack[head]=0; // verwijder de waarde
    return temp;
    
}
*/

/** push
 *
*/
/**
void push(kenteken p)
{
    //stack[head++]=p;
}
*/

/** isFull
 *
*/
/**
bool isFull()
{
    return (head==SIZE);
}
*/

/** isEmpty
 *
*/

/**
bool isEmpty()
{
 return (head ==0);
}
*/

/**
void reset()
{}

*/</declaration>
		<location id="id32" x="340" y="-374">
			<name x="255" y="-416">startCycle</name>
		</location>
		<location id="id33" x="952" y="-374">
			<name x="977" y="-459">endCycle</name>
		</location>
		<location id="id34" x="204" y="-374">
			<name x="194" y="-408">idle</name>
		</location>
		<location id="id35" x="544" y="-230">
		</location>
		<location id="id36" x="646" y="-374">
			<name x="636" y="-408">posTaken</name>
		</location>
		<location id="id37" x="442" y="-374">
			<name x="432" y="-408">positioning</name>
		</location>
		<location id="id38" x="544" y="-510">
			<name x="534" y="-544">DefaultHigh</name>
		</location>
		<location id="id39" x="714" y="-374">
			<name x="704" y="-408">procStart</name>
		</location>
		<location id="id40" x="782" y="-374">
			<name x="773" y="-408">procEnd</name>
		</location>
		<location id="id41" x="714" y="-204">
			<name x="704" y="-238">running</name>
		</location>
		<location id="id42" x="850" y="-204">
			<name x="840" y="-238">finished</name>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id40"/>
			<target ref="id33"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="800" y="-289">initClosingProc!</label>
			<nail x="850" y="-272"/>
			<nail x="782" y="-272"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="714" y="-306">initOpenProc!</label>
			<label kind="comments" x="561" y="-306">select:
guard:  
sync:initOpenProc!
update:</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id37"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id39"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id32"/>
			<nail x="297" y="-374"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="assignment" x="358" y="-646">systemtime=0</label>
			<nail x="952" y="-484"/>
			<nail x="952" y="-646"/>
			<nail x="340" y="-646"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id35"/>
			<label kind="assignment" x="460" y="-323">direction=1</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id36"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="assignment" x="460" y="-442">direction=0</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="comments" x="986" y="-408">select:
guard: (position==1 &amp;&amp; waterlevel==0) || (position==0 &amp;&amp; waterlevel==10)
sync:
update:</label>
			<nail x="756" y="-204"/>
			<nail x="782" y="-204"/>
			<nail x="816" y="-204"/>
		</transition>
	</template>
	<template>
		<name>deur</name>
		<parameter>id_d d</parameter>
		<declaration>
/**
 * Requirements
 * Een deur is tijdens een actieve pomp altijd gesloten
 * Een deur kan nooit open staan terwijl het stoplicht voor invaren/uitvaren op rood staat.
 * Een deur wordt altijd getriggerd vanuit de maincontroller en kan dus oneindig wachten totdat de maincontroller een opdracht geeft.
 * Een deur kan nooit in een oneindige tussenstand staan zoals: is bezig met openen of is bezig met sluiten.
 *
 *
*/
// parameter: const gatenr gatenummer
clock x;
//int[0,1] currentstate;</declaration>
		<location id="id43" x="0" y="0">
			<name x="-17" y="8">closed</name>
		</location>
		<location id="id44" x="0" y="-204">
			<name x="-10" y="-238">open</name>
		</location>
		<init ref="id43"/>
		<transition>
			<source ref="id44"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="102" y="-161">deurklik[d]?</label>
			<nail x="68" y="-170"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-178" y="-153">deurklik[d]?</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-170"/>
		</transition>
	</template>
	<template>
		<name>schip</name>
		<parameter>kenteken id</parameter>
		<declaration>

/**
 * Requirements
 * Een schip kan maar 1 id/kenteken hebben en dit kenteken komt maar 1 keer in  de cyclus voor, inclusief de beide wachtrijen en de queue van de sluiskolk.
 * Een schip kan in de sluiskolk niet van richting veranderen
 * Een schip kan na het doorlopen van de cycli en uitgevaren zijn van de sluis een willekeurige andere positie en richting hebben aangenomen.
 *
 *
 *
*/
// const kenteken schipid
//int positie =0;
//bool myDirection = false;
clock x;

</declaration>
		<location id="id45" x="0" y="-102">
			<name x="-10" y="-136">ildle</name>
		</location>
		<location id="id46" x="0" y="51">
			<name x="-10" y="17">varen</name>
		</location>
		<init ref="id45"/>
		<transition>
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="guard" x="59" y="17">x&gt;5</label>
			<nail x="8" y="51"/>
			<nail x="170" y="51"/>
			<nail x="170" y="-102"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="select" x="0" y="-76">shipid: kenteken</label>
			<label kind="synchronisation" x="0" y="-42">schipklik[shipid]?</label>
			<label kind="comments" x="-187" y="-76">sync:
send[kenteken]


update:
positie: int[0,1]</label>
		</transition>
	</template>
	<template>
		<name>pomp</name>
		<declaration> clock x;</declaration>
		<location id="id47" x="-714" y="34">
			<name x="-724" y="0">uit</name>
			<label kind="comments" x="-901" y="374">ipv aan en uit states kan er ook gekozen worden voor de states laag en hoog</label>
		</location>
		<location id="id48" x="-612" y="170">
			<name x="-622" y="136">aan</name>
		</location>
		<init ref="id47"/>
		<transition>
			<source ref="id48"/>
			<target ref="id48"/>
			<label kind="guard" x="-731" y="204">position==0 &amp;&amp; waterlevel&lt;10</label>
			<label kind="assignment" x="-612" y="221">waterlevel++</label>
			<label kind="comments" x="-824" y="229">select:
guard: sluisToggle==false 
sync:
update: waterlevel++</label>
			<nail x="-612" y="272"/>
			<nail x="-578" y="272"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id48"/>
			<label kind="guard" x="-594" y="136">position==1 &amp;&amp; waterlevel&gt;-10</label>
			<label kind="assignment" x="-594" y="170">waterlevel--</label>
			<label kind="comments" x="-527" y="-50">select:
guard:position==1 &amp;&amp; waterlevel&gt;-10
sync:
update:waterlevel--</label>
			<nail x="-510" y="170"/>
			<nail x="-510" y="204"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-696" y="153">pomp_klik?</label>
			<label kind="assignment" x="-696" y="170">sluisIsBezig=false</label>
			<nail x="-714" y="170"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-662" y="17">pomp_klik?</label>
			<label kind="assignment" x="-662" y="34">sluisIsBezig=true</label>
			<nail x="-680" y="34"/>
			<nail x="-612" y="34"/>
		</transition>
	</template>
	<template>
		<name>sluis</name>
		<parameter>id_q q</parameter>
		<declaration>
/**
 * Requirements
 * Een wachtrij kan maximaal 2 schepen bevatten.
 * Een aanvarend schip kan maximaal 1 cyclus in de wachtrij staan.
 *
 *
 *
 *
*/

/**
 * Requirements
 * Er kunnen maximaal 2 schepen in de sluis.
 * De kentekens van schepen in de sluis is nooit gelijk aan een kenteken van een schip in een wachtrij.
 *
 *
 *
 *
*/
const int N = 4;          //
clock x;
kenteken list[N+1];
int[0,N] len;



// parameter: const stack  q

bool is_full()
{
    return false;
}


void dequeues()
{
    int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}


void enqueue(kenteken element)
{
     //list[element] = element;
     list[len++] = element;
}
void dequeue(kenteken element)
{
     list[element] = 0;
}
bool is_empty()
{
    return false;
}

bool go_out()
{
    return false;
}


bool lock_empty()
{
    return false;
}

/*
// Returns the front element of the queue
id_t frontElement()
{
     return list[len - 1];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}
*/

chan lock_full;

chan to_lock;
//chan go_out;</declaration>
		<location id="id49" x="0" y="0">
			<name x="-10" y="-34">idle</name>
		</location>
		<location id="id50" x="119" y="0">
			<name x="109" y="-34">add</name>
		</location>
		<location id="id51" x="238" y="0">
			<name x="228" y="-34">release</name>
		</location>
		<init ref="id49"/>
		<transition>
			<source ref="id51"/>
			<target ref="id49"/>
			<nail x="238" y="25"/>
			<nail x="238" y="102"/>
			<nail x="0" y="102"/>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="select" x="154" y="-51">shipid: kenteken</label>
			<label kind="synchronisation" x="154" y="-17">unregister[shipid]?</label>
			<label kind="assignment" x="154" y="0">dequeue(shipid)</label>
			<nail x="136" y="0"/>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id50"/>
			<label kind="select" x="52" y="-51">shipid: kenteken</label>
			<label kind="synchronisation" x="52" y="-17">register[shipid]?</label>
			<label kind="assignment" x="52" y="0">enqueue(shipid)</label>
			<label kind="comments" x="52" y="25">select:
guard:position==0 &amp;&amp; systemtime&gt;0900
sync:schipklik[shipid]!
update:enqueue(shipid)</label>
			<nail x="34" y="0"/>
		</transition>
	</template>
	<template>
		<name>stoplight</name>
		<parameter>id_s s</parameter>
		<declaration>
/**
 * Requirements
 * Een stoplicht is tijdens een actieve pomp altijd op rood.
 * Een invaar- en uitvaarstoplicht kunnen niet beiden op groen staan, omdat er dan een botsing kan voorkomen.
 * Een invaar- en uitvaarstoplicht kunnen beiden op rood staan.
 *
 *
 *
*/

// stoplicht 0
// stoplicht 1
// stoplicht 2
// stoplicht 3
 clock x;</declaration>
		<location id="id52" x="0" y="0">
			<name x="-10" y="-34">rood</name>
		</location>
		<location id="id53" x="272" y="0">
			<name x="262" y="-34">groen</name>
		</location>
		<init ref="id52"/>
		<transition>
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="93" y="-42">stoplichtklik[s]?</label>
			<nail x="34" y="0"/>
			<nail x="170" y="0"/>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="18" y="119">stoplichtklik[s]?</label>
			<nail x="272" y="136"/>
			<nail x="0" y="136"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();
// List one or more processes to be composed into a system.
system maincontroller,deur,pomp,sluis,schip,stoplight,proc1,proc2;
//system maincontroller,deur,pomp,sluis,schip,stoplight,OpeningProc,ClosingProc;
//system newmain,newmainOpeningProc,request,priorityQueue,priorityQueue,newmainClosingProc,sensorLow,sensorHigh,waterlevelSensorLow,waterlevelSensorHigh,newpomp,newdeur,sluis;</system>
	<queries>
		<query>
			<formula>A[] (sluis.list[0] + sluis.list[1]) &lt;= 2</formula>
			<comment>Voor alle paden geldt dat er maximaal 2 schepen in de sluis zijn.
</comment>
		</query>
		<query>
			<formula>A[] (deur(0).open --&gt;deur(0).closed)  imply (x&gt;=5 and x&lt;=3)</formula>
			<comment>De deur sluiten kan binnen 30 tijdseenheden
</comment>
		</query>
		<query>
			<formula>A[] not(waterniveau&lt;=-10 || waterniveau&gt;=10)</formula>
			<comment>De pomp kan niet meer water bijpompen dan toegestaan op het interval [-10,10].
</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] sluis.list[N-1]==0</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] deur.open imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoe lang blijft deur open</comment>
		</query>
		<query>
			<formula>A[] deur.closed --&gt;deur.open  imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>hoelang duurt openen</comment>
		</query>
		<query>
			<formula>A[] deur.open--&gt;deur.closed imply (systemtime&gt;=2 and systemtime&lt;=3)</formula>
			<comment>Hoelang duurt sluiten van een deur</comment>
		</query>
		<query>
			<formula>A[] stoplight.groen  imply (systemtime&gt;=2 and systemtime&lt;=3)</formula>
			<comment>Hooelang blijft stoplicht op groen</comment>
		</query>
		<query>
			<formula>A[] stoplight.groen imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoelang duurt van rood naar groen</comment>
		</query>
		<query>
			<formula>A[] stoplight.groen imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoelang duurt van groen naar rood</comment>
		</query>
		<query>
			<formula>A[] schip(0).varen imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Invaren van een schip duurt max 30 tijdseenheden.
</comment>
		</query>
		<query>
			<formula>A[] schip(0).idle || schip(1).idle and (deur(0).closed &amp;&amp; deur(1).closed) and  imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoe lang blijft schip in sluis</comment>
		</query>
		<query>
			<formula>A[] schip A[] Obs.taken imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoe snel vaart schip uit de sluis?</comment>
		</query>
		<query>
			<formula>A[] pomp.pomp_uit - Obs.taken imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoe lang duurt pomp aanzetten</comment>
		</query>
		<query>
			<formula>A[] pomp.idle imply (x&gt;=2 and x&lt;=3)</formula>
			<comment>Hoelang blijft pomp bezig</comment>
		</query>
		<query>
			<formula>A[] pomp.idle --&gt; pomp.pomp_uit  imply (systemtime&gt;=2 and systemtime&lt;=3)</formula>
			<comment>Hoe snel gaat pomp uit</comment>
		</query>
		<query>
			<formula>A[] (sluis.list[0] + sluis.list[1]) &lt;= 2</formula>
			<comment>Wanneer is sluis actief


A[] !deadlock
A[] not (Sluis.Tussenstop5 &amp;&amp; Deur.Klaar_voor_uitvaart)
A[]  (Sluis.Voorbereiden imply Deur.Dicht)
A[]  (Deur.Dicht imply Counter==0)
A[]  (Buitenstoplicht.Groen imply invaren_allowed==true)
A[] ! (Binnenstoplicht.Groen imply invaren_allowed==false)
A[]  (globale_tijd&gt;30)
E&lt;&gt;  (Schip.Stoppen and (Counter &gt;5))
A[] (Schip.Vertrekken imply Sluisdeur.Dicht)
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; sluis.add</formula>
			<comment>Sluiskolk kan (and store in queue) invarende schepen ontvangen.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen
			</formula>
			<comment>schip 0 kan de locatie bereiken om te varen
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(1).varen
			</formula>
			<comment>schip 1 kan de locatie bereiken om te varen
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen and schip(1).idle
			</formula>
			<comment>schip 0 varen terwijl schip 1 aan het wachten is</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip(0).varen and (forall (i : id_t) i != 0 imply schip(i).idle)</formula>
			<comment>schip 0 kan varen terwijl andere schepen aan het wachten zijn</comment>
		</query>
		<query>
			<formula>===== Safety Properties:</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : id_t) forall (j : id_t) Train(i).Cross &amp;&amp; Train(j).Cross imply i == j</formula>
			<comment>There is never more than one train crossing the bridge (at
any time instance).
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : kenteken) forall (j : kenteken) schip(i).varen &amp;&amp; sluis.list[j] imply i == j</formula>
			<comment>Tijgelijkertijd kan er kunnen meer dan één schip invaren</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_s) forall (j : id_s) stoplicht(i).groen &amp;&amp; stoplicht(j).groen imply i == j</formula>
			<comment>Het is nooit mogelijk dat beide stoplichten op groen staan</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_d) forall (j : id_d) deur(i).open &amp;&amp; deur(j).open imply i == j</formula>
			<comment>deurHet is nooit mogelijk dat beide deuren open zijn.</comment>
		</query>
		<query>
			<formula>A[] sluis.list[N] == 0</formula>
			<comment>Het is nooit mogelijk dat er een N aantal schepen in de sluis zijn (dus deze array heeft nooit overflow).</comment>
		</query>
		<query>
			<formula>A[] forall(i:id_t) level[i] &lt;= capa[i]</formula>
			<comment></comment>
		</query>
		<query>
			<formula>===== Liveness Properties:
			</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](Train1.b==1 imply Train1.z&lt;=100)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(0).rood --&gt; schip(0).idle imply systemtime &lt;=50</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(0).groen --&gt; schip(0).varen</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(1).rood --&gt; schip(1).idle</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; stoplight(0).groen --&gt; schip(0).varen</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.</comment>
		</query>
		<query>
			<formula>A[] !((Gate(0).open or Gate(1).open) and (Pump(0).pomp_aan or Pump(1).pomp_aan))</formula>
			<comment>Er is in elk pad geen state waarbij een van de deuren open is en een pomp aan is</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (Pump(0).pomp_aan and Pump(1).pomp_aan)</formula>
			<comment>In geen van de paden is het mogelijk om beide pompen aan te hebben</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (waterniveau==0) or (waterniveau==5)</formula>
			<comment>Het water kan ooit 0 zijn maar ook 5</comment>
		</query>
		<query>
			<formula>==== Time interval checking:</formula>
			<comment>


E&lt;&gt; (Receiver.FIN and timevalid==1 and g&lt;maxtime)
A[] (Receiver.FIN and timevalid==1 and g&gt;=maxtime)

A[] now&gt;=200 imply(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=150 imply (Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=110 imply
(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=127 imply
(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] now&gt;=126 imply
(Belt.end &amp;&amp; Jobber1.begin &amp;&amp; Jobber2.begin)


A[] Obs.taken imply (x&gt;=2 and x&lt;=3) to show that the transition is taken when x is in
the interval [2, 3].
• E&lt;&gt; Obs.idle and x&gt;2 : it is possible to take the transition with x in the interval (2, 3].
• A[] Obs.idle imply x&lt;=3 : to show that the upper bound is respected.
The former property E&lt;&gt; Obs.idle and x&gt;3 no longer holds.


https://www.it.uu.se/research/group/darts/uppaal/small_tutorial.pdf
https://arxiv.org/pdf/2211.03817.pdf



Recall the Train Crossing example of the
previous section. The following queries estimates the
probabilities that Train(0) and Train(5) will be in the
crossing before 100 time-units:

Fig. 9: The cumulative probability distribution of
Pr[&lt;=T](&lt;&gt; Train(5).Cross).
Pr[&lt;=100](&lt;&gt; Train(0).Cross)
Pr[&lt;=100](&lt;&gt; Train(5).Cross)
https://dial.uclouvain.be/pr/boreal/object/boreal:211928/datastream/PDF_01/view


Example 3. In the Train Gate example, it might be sufficient to confirm that the probability that Train(5)
reaches the crossing within 100 time-units is larger than
that of Train(0). Posing the query:

Pr[&lt;=100](&lt;&gt;Train(5).Cross) &gt;=
Pr[&lt;=100](&lt;&gt;Train(0).Cross)


Example 4. As an interesting property of the Train Crossing example, we want to know the average of the maximum number of trains that are stopped within the first
20 time-units:
E[&lt;=20; 20000](max: sum(i:id_t) Train(i).Stop)
https://dial.uclouvain.be/pr/boreal/object/boreal:211928/datastream/PDF_01/view




reachability
http://lmf.di.uminho.pt//ac-1718/slides/AC1718-4-Uppaal1.pdf



http://www2.ing.unipi.it/~a008669/didattica/FMSS2021/FormalMethods5.pdf



http://www2.imm.dtu.dk/courses/02917/03-UPPAAL.pdf




http://uu.diva-portal.org/smash/get/diva2:116821/FULLTEXT01.pdf
</comment>
		</query>
		<query>
			<formula>==== Other property checks</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] </formula>
			<comment>       P1 Het is mogelijk dat  de sluis van richting verandert.   !Main.Direction
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; sluisIsBezig==true waterlevel&gt;10</formula>
			<comment>    P2 Het is mogelijk dat  de sluispomp in een cyclus teveeel  water heeft gepompt en dat er  daardoor water weggepompt dan wel  bijgekompt dient te worden   main.waterlevel
</comment>
		</query>
		<query>
			<formula>A[]  systemtime &lt; 100 --&gt;</formula>
			<comment>     P3 Het is al binnen 100 ms mogelijk omte  achterhalen aan welke kant de sluisdeuren  open moeten.  
</comment>
		</query>
		<query>
			<formula>A[] direction==0 --&gt; !(waterlevel)</formula>
			<comment>     P4 Als de richting van een schip gelijk  is aan N, dan is het waterlevel  niet gelijk aan 1-5 of R  
</comment>
		</query>
		<query>
			<formula>A[] deur(0).open and deur(1).open --&gt; pomp.idle</formula>
			<comment> P5 De sluispomp is nooit in  positie AAN, wanneer de sluisdeuren  open zijn.  
</comment>
		</query>
		<query>
			<formula>A[] maincontroller.endCycle --&gt; systemtime &lt; 100</formula>
			<comment>     a) dan is een cyclus gegarandeerd  binnen 100 ms (including 100 ms)  (undefined)  
</comment>
		</query>
		<query>
			<formula>A[] maincontroller.endCyle imply systemtime&gt;=8</formula>
			<comment>     a') dan is een cyclus niet   gegarandeerd binnen   100 ms  
</comment>
		</query>
		<query>
			<formula>A[] direction==1 and maincontroller.endCycle imply systemtime&gt;150 </formula>
			<comment>     b)  dan is het onmogelijk   om van beneden naar boven te varen,   of andersom binnen 150 ms  
</comment>
		</query>
		<query>
			<formula>A[] direction==0 and maincontroller.endCycle imply systemtime&gt;150 </formula>
			<comment>     b') dan is het mogelijk   om van beneden naar boven te varen, of   andersom binnen 150 ms  
</comment>
		</query>
		<query>
			<formula>A[] (gate().closed and gate(1).closed) imply pomp.idle</formula>
			<comment>     p12 Wanneer beide sluisdeuren in   state gesloten zijn, dan is de pomp in   zijn initiale state of 100 ms  verwijderd van zijn initiele state  
</comment>
		</query>
		<query>
			<formula>A[] (gate(0).open||gate(1).open)  -&gt; (pomp.idle )
</formula>
			<comment>     a) Als de deur open is  (ongeacht boven of beneden,  dan bevind de sluispomp   zich in een  idle state</comment>
		</query>
		<query>
			<formula>A[] gate(0).closed -&gt; maincontroller.running
</formula>
			<comment>     b) Als de deur is gesloten   dan bevind de maincontroller zich   in een predefined state   </comment>
		</query>
		<query>
			<formula>A[] direction=1 and maincontroller.procStart -&gt;  pomp.uit and gate(0).open and gate(1).open and (stoplight(0).green and stoplight(1).green  )
</formula>
			<comment>     p17Voor invaren geldt altijd: waterlevel,   pomp uit, sluisdeuren open en   stoplicht op groen   </comment>
		</query>
		<query>
			<formula>A[] direction=1 and posiion ==0 and maincontroller.procStart -&gt;  pomp.uit and gate(0).open and gate(1).open and (stoplight(0).green and stoplight(1).green  )</formula>
			<comment>     p18 Als een schip van rechts binnen komt en sluisdeuren zijn dicht   dan moet het stoplicht op rood,   de pomnp in transitie van laag  naar hoog en niet andersom   !main.direction -&gt; forall  (i:id_d) forall (j:id_s) gate(i).closed text{&amp;&amp;}  stoplight.rood text{&amp;&amp;} main.rd_1
</comment>
		</query>
		<query>
			<formula>A[] proc1.s0 imply (gate(0).open and stoplight(0).groen )  ||  ( gate(1).open and  stoplight(1).groen)
</formula>
			<comment>      p20 Voor invarenden geldt pomp uit, sleusdeur open en stoplicht op groen   </comment>
		</query>
		<query>
			<formula>A[] pomp.aan imply  forall  (i:id_d) forall(j:id_s )  gate(i).closed stoplight(j).rood</formula>
			<comment>     p21 voor nivelleren geldt pomp is aan, sluisduren zijn doicht en het stoplicht is op rood   
</comment>
		</query>
		<query>
			<formula>A[] (schip(0).varen || schip(1).varen) and maincontroller.procEnd imply (deur(0).open || deur(1).open) and (waterlevel ==10 || waterlevel==-10) and ((stoplicht(0).groen || stoplicht(1).groen))</formula>
			<comment>     p22 Als een schip vertrekt dan zijn altijd, sleusdeuren open, waterlevel gereed op niveau 5 of 0 en stoplicht direct op groen   
</comment>
		</query>
		<query>
			<formula>A[] </formula>
			<comment>     p25 als een schip binnen is, en er zijn wachtende schepen,  dan moet het stoplicht via oranje naar rood  
</comment>
		</query>
		<query>
			<formula>A[] schip(0)</formula>
			<comment>     p27 als een schjip binnen vaart mnoiet hij ook eft binnen zijn en niet binnenvaren, dit geldt ook voor   
</comment>
		</query>
		<query>
			<formula>A[] (schip(0).varen || schip(1).varen --&gt; forall(i:kenteken) sluis.register(i)</formula>
			<comment>     p28 Een schip komt aanvaren en geeft een signaal  aan de sluis.   
</comment>
		</query>
		<query>
			<formula>A[]  Queue.list[N-1] == 2 -&gt;  (Sluiskolk.list[N]==1  ||Sluiskolk.list[N]==2)</formula>
			<comment>     p29 Indien er meer dan twee  schepen in de sluis zitten dan wordt  het ship geplaats in de wachrij.    
</comment>
		</query>
		<query>
			<formula>A[] maincontroller.s6   schip.varen -&gt;  Queue.list[N-1] &lt;2</formula>
			<comment>     p30 Een schip kan pas naar binnenrijden als de sluisdeuren open zijn, het stoplicht is op groen er er zijn minder dan 2 schepen in de sluis.    
</comment>
		</query>
		<query>
			<formula>A[]  Queue.list[N-1] == 2
</formula>
			<comment>     p32 Eenmaal in de sluis zal  het schip moeten wachten  op de sluis en de pomp.  </comment>
		</query>
		<query>
			<formula>A[] schip.varen   maincontroller.s12 || maincontroller.s13 -&gt; (!maincontroller.rn1 and !maincontroller.rn2)
</formula>
			<comment>     p33 Een schip mag alleen uitvaren  als de pomp klaar is, de  sleusdeuren open.    </comment>
		</query>
		<query>
			<formula>A[] pomp.pomp_active -&gt; maincontroller.s6    forall(i:id_d) gate(i).closed</formula>
			<comment>     p37 Een pomp begint met pompen bij een  signaal van de sluis.  Een sluis op zijn beurt geeft  alleen een signaal aan de pomp als  de sleudeuren dichtzijn   
</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>      p38 Geen deadlock  
</comment>
		</query>
		<query>
			<formula>A[] not forall(i:id_d)  gate(i).closed -&gt;(maincontroller.s12||maincontroller.s13)</formula>
			<comment>     p39 Voor geen enkel pad geldt  dat als  de deuren gesloten zijn  volgens de kluis dat er een  deur openstaat om een schip  naar buiten te laten.   
</comment>
		</query>
		<query>
			<formula>A[] maincontroller.posTaken imply  forall(gate(0).closed)</formula>
			<comment>     p40 Voor alle paden geld dat als  een sluis aan het voorbereiden is,  dan zijn alle deuren dcht.   
</comment>
		</query>
		<query>
			<formula>A[] deur(0).closed and (deur(1).closed imply</formula>
			<comment>     p41 Voor alle paden geld dat  als een deur dicht is het aantal  schepen in de kade gelijk is aan nul  
</comment>
		</query>
		<query>
			<formula>A[] not stoplight(2).groen ||  stoplight(3).groen -&gt; maincontroller.procStart</formula>
			<comment>     p42 Voor geen enkel pad  geld dat als het binnenstoplicht  op groen staat dat het niet toegestaan  in naar binnen te varen   
</comment>
		</query>
		<query>
			<formula>A[]  maincontroller.endCycle and systemtime&gt;30</formula>
			<comment>     p43 Voor alle paden geldt  dat de globale tijd langer is dan   30 tijdseenheden  
</comment>
		</query>
		<query>
			<formula>A[] schip(0).groen ||  schip(1).groen imply  (maincontroller.procEnd || maincontroller.endCycle) and (deur(0).closed and deur(1).closed)</formula>
			<comment>     p45 Voor alle paden geldt   als schip vrtrekt   is sluisdeur dicht  
</comment>
		</query>
		<query>
			<formula>A[] (deur(0).closed and stoplicht(0).rood)||(deur(1).closed and stoplicht(1).rood) imply pomp.uit</formula>
			<comment>      p46 Voor alle paden geldt als   stoplicht op rood sluisdeuren dicht   en schip vertrokken dan   is de nivelleermachine uit  
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; schip.varen and direction==1 and gate(0).open</formula>
			<comment>     p47 Er is geen pad waarop   een schip vertrekt  vanuit de rechtersluisdeur en   de linkersluisdeur is open en  linkeruitaartstoplicht   en linkeruitvaartsoplicht opgroen    en nibelleermachine is aan  
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; </formula>
			<comment>     p48 Er is een pad waarvoor   geldt dat linkerslsuisdeuren dicht zijn,   rechtersluisdeuren dicht zijn  rechteruitvaartstoplicht   is rood en rechteruitvaartstoplicht is  rood   terwijl eer geen schip  in de sluis licht  
</comment>
		</query>
		<query>
			<formula>A[] forall(i:id_s) stoplight.groen -&gt;  gate(0).open  gate(1).open  (maincontroller.pomp1_idle ||  maincontroller.pomp2_idle)
</formula>
			<comment>     p49 EEn stoplich staat altijd   op groen als de deuren open staan   en de pomp niet bezig is.   </comment>
		</query>
		<query>
			<formula>A[] (maincontroller.waterlevel&lt;waterlaag) -&gt;  sluisIsBezig==false</formula>
			<comment>      p51 Voor alle paden in een  pomp geldt dat als water level lager   is dan waterlaag   pompwaterweg is altijd false    
</comment>
		</query>
		<query>
			<formula>A[] waterlevel &gt; 10 --&gt; pomp.sluisIsBezig==false</formula>
			<comment>     p52 Voor alle paden gelft dat als   water level hoger is dan waterhoog dan is   pompwater altjd false  
</comment>
		</query>
		<query>
			<formula>A[] not maincontroller.rn1 ||  maincontroller.rn2 -&gt; gate(0).open   gate(1).open   Queue.list[N-1] == 0   ((stoplight(0).groen||stoplight(1).groen) || (stoplight(3).groen stoplight(4).groen))
</formula>
			<comment>     p53 Het zal nooit gebeuren   dat een pomp water toevoegt   als deuren open   zjn, geen schip   in sluis en stoplicht op groen   </comment>
		</query>
		<query>
			<formula>A[] (maincontroller.blocked1 ||  maincontroller.blocked2) -&gt; Queue.list[N-1] &gt;0   gate(0).closed  gate(1).closed  maincontroller.waterlevel==maincontroller.waterlevel_laag</formula>
			<comment>     p54 Het kan gebeuren dat bij   pompr het stoplicht op rood staat,   het schip in de sluis en   deur is dicht,  en waterstand gelijk aan waterlaag   
</comment>
		</query>
		<query>
			<formula>A[] maincontroller.rn1||maincontroller.rn2  -&gt; gate(0).closed   maincontroller.waterlevel==waterlaag
</formula>
			<comment>     p55 Er is een mogelijkheid  dat vanuit pomp get stoplicht op rood  wordt gezet en waterlevel  gelijk is aan waterlaag   </comment>
		</query>
		<query>
			<formula>A[] maincontroller.rn1||maincontroller.rn2  -&gt;maincontroller.waterlevel==  maincontroller.waterlaag
</formula>
			<comment>     p56 Het kan voorkomen dat bij  state pompaan het waterniveau gelijk  is aan waterlaag   </comment>
		</query>
		<query>
			<formula>A[] E&lt;&gt; gate(0).open  and (maincontroller.direction ==0  ||maincontroller.direction==1)
</formula>
			<comment>     p57 Voor alle paden gelt dat er een   mogelijkheid is dat deur is open/dicht en   sluis nivelleert omhoog/omlaag   </comment>
		</query>
		<query>
			<formula>E&lt;&gt; P0.S1 and P0.x&gt;0</formula>
			<comment>E&lt;&gt; P0.S1 and P0.x&gt;0 : it is possible to wait in S1 of P0.</comment>
		</query>
		<query>
			<formula>A[] P1.S1 imply P1.x==0</formula>
			<comment>A[] P1.S1 imply P1.x==0 : it is not possible to wait in S1 of P1.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Obs.idle and x&gt;2</formula>
			<comment>E&lt;&gt; Obs.idle and x&gt;2 : it is possible to take the transition when x is between 2 and 3. The upper bound 3 is checked with the next property.</comment>
		</query>
		<query>
			<formula>E[&lt;=500;1000] (max: G*(1-main.AssertViolation || main.main Term)).</formula>
			<comment>https://cister-labs.pt/f-ide2021/images/preprints/F-IDE_2021_paper_12.pdf</comment>
		</query>
		<query>
			<formula>forall (x:int[0,42])</formula>
			<comment>http://www.artist-embedded.org/docs/Events/2006/ChinaSchool/15_3-2-UPAAL.pdf</comment>
		</query>
		<query>
			<formula>forall
(x:int[0,4])array[x];</formula>
			<comment>http://www.artist-embedded.org/docs/Events/2006/ChinaSchool/15_3-2-UPAAL.pdf</comment>
		</query>
		<query>
			<formula>A [] forall (i: t_id ) forall (j : t_id ) Initializer . Initialized &amp;&amp; i != j imply
( Train (i ). curSeg != Train (j) . curSeg ) &amp;&amp;
( Train (i ). DoubleSegment imply Train (i ). headSeg != Train (j ). curSeg ) &amp;&amp;
( Train (i ). DoubleSegment &amp;&amp; Train (j). DoubleSegment imply Train (i).
headSeg != Train (j). headSeg )</formula>
			<comment>https://backend.orbit.dtu.dk/ws/portalfiles/portal/223213323/main_2_.pdf</comment>
		</query>
		<query>
			<formula></formula>
			<comment>https://www.cs.vu.nl/~wanf/theses/karstens-mscthesis.pdf</comment>
		</query>
		<query>
			<formula></formula>
			<comment>https://core.ac.uk/download/pdf/80715679.pdf</comment>
		</query>
		<query>
			<formula>P_Identification.Scan_Result –&gt;P_Identification.Baudrate_Tested== Baudrate_Dev</formula>
			<comment>https://subs.emis.de/LNI/Proceedings/Proceedings186/182.pdf</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Transaction(TRANSACTIONS-1).Restart</formula>
			<comment>http://www.cs.vsb.cz/kot/download/Publications/2008_IMCSIT_Kot.pdf</comment>
		</query>
		<query>
			<formula></formula>
			<comment>https://escholarship.org/content/qt1193n1qj/qt1193n1qj_noSplash_6cf89dd8732aeb031f01a02cf49cb4f4.pdf?t=oeisf8</comment>
		</query>
		<query>
			<formula></formula>
			<comment>http://e-theses.imtlucca.it/190/1/Morichetta_phdthesis.pdf</comment>
		</query>
		<query>
			<formula>A[]forall(i : id_t) Cluster.Done imply (Job(i).waiting == 1 &amp;&amp; Job(i).running == 1)
</formula>
			<comment>https://skemman.is/bitstream/1946/28907/1/JonFridrikJonatanssonMasterThesis.pdf</comment>
		</query>
		<query>
			<formula>==== More info</formula>
			<comment>
• A[] Obs.taken imply (x&gt;=2 and x&lt;=3) to show that the transition is taken when x is in
the interval [2, 3].
• E&lt;&gt; Obs.idle and x&gt;2 : it is possible to take the transition with x in the interval (2, 3].
• A[] Obs.idle imply x&lt;=3 : to show that the upper bound is respected.
• A[] Obs.taken imply x&gt;=2 : all fall-down of the clock value (see curve) are above 2. This
query means: for all states, being in the location Obs.taken implies that x&gt;=2.
• E&lt;&gt; Obs.idle and x&gt;3 : this is for the waiting period, you can try values like 30000 and
you will get the same result. This question means: is it possible to reach a state where Obs
is in the location idle and x&gt;3.
• E&lt;&gt; P0.S1 and P0.x&gt;0 : it is possible to wait in S1 of P0.
• A[] P1.S1 imply P1.x==0 : it is not possible to wait in S1 of P1.
• E&lt;&gt; p: there exists a path where p eventually holds.
• A[] p: for all paths p always holds.
• E[] p: there exists a path where p always holds.
• A&lt;&gt; p: for all paths p will eventually hold.
• p --&gt; q: whenever p holds q will eventually hold.
https://www.it.uu.se/research/group/darts/uppaal/small_tutorial.pdf
https://hal.science/hal-01149806/document
https://fmt.ewi.utwente.nl/media/2.pdf
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7242053/
A[] ( heart_sub.FLATLINE =&gt; (wasSwitchedOff == 1) )
A[] ( heart_Sub.AfterAContraction =&gt; A&lt;&gt; heart_Sub.AfterVContraction )
https://www.brics.dk/RS/01/11/BRICS-RS-01-11.pdf
Safety: Never overflow.
 A[] forall(i:id_t) level[i] &lt;= capa[i]
 Validation/Reachability: How to get 1 unit.
 E&lt;&gt; exists(i:id_t) level[i] == 1
http://www2.imm.dtu.dk/courses/02917/03-UPPAAL.pdf
https://www.academia.edu/6785640/UPPAAL_a_Tool_Suite_for_Automatic_Verification_of_Real_Time_Systems
https://scholarlypublications.universiteitleiden.nl/access/item%3A2899970/view
A[] not ((t1==0 or t1==50) and Place1.State2 and Place2.State2)
A□ (firstquadrant → inrange)
. E♢ (x &lt; 0 ∧ y &gt; 0)
A□ (firstquadrant → inrange ∨ M.STOP)
http://www.infsoc.org/journal/vol06/IJIS_06_2_079-087.pdf
E&lt;&gt; Viking1==safe and Viking2==safe
and Viking3==safe and Viking4==safe
and globaltime&lt;=60
https://researchbank.swinburne.edu.au/file/63841fed-2702-40ac-9d06-477ad313983b/1/PDF%20(Published%20version).pdf
A [] (( k3_sw . K3WontClose &amp;&amp; BypAvailable &amp;&amp; State . InvSyncingState ) imply ( K5_closed &amp;&amp; BypassSCRCommand ))

State . InvOnLineState &amp;&amp; CloseK3Command &amp;&amp; k3_sw . OpenSpuriously &amp;&amp; BypAvailable −−&gt; k3_sw .c &lt;= 20 &amp;&amp; K5_closed &amp;&amp; BypassSCRCommand
A [] ( CloseK3Command &amp;&amp; ( k3_sw . OpenSpuriously || k3_sw . Opened ) &amp;&amp; ! BypAvailable imply ! BypassSCRCommand )
A [] !( k3 . K3WontOpen &amp;&amp; InvOn )
A [] ( k5 . FailToClose &amp;&amp; ! ACOVActive &amp;&amp; ! ACUVActive &amp;&amp; ! DCLinkOV &amp;&amp; State . InvOnLineState ) imply ( InvOn &amp;&amp; K3ClosedDebounced )
k5 . FailToClose −−&gt; ! BypAvailableA [] ( k5_hw . Closed &amp;&amp; ! K5_closed &amp;&amp; ! CloseK3Command &amp;&amp;BypAvailable imply BypassSCRCommand )

( acuvov . AlarmActive &amp;&amp; BypAvailable ) −−&gt;( acuvov . Timer &lt;= 5 &amp;&amp; BypassSCRCommand &amp;&amp;( K5_closed || k5 . Closing ))


( acuvov . AlarmActive &amp;&amp; ! BypAvailable ) −−&gt; (! BypassSCRCommand &amp;&amp; ! K5_closed &amp;&amp; ! K3ClosedDebounced &amp;&amp; acuvov . Timer &lt;= 3000)

( BypassSCRCommand &amp;&amp; ! ACOVActive &amp;&amp; ! ACUVActive &amp;&amp; ! DCLinkOV ) −−&gt; ( CloseK3Command &amp;&amp; InvOn )

A [] !( DCLinkOV &amp;&amp; BypassACOV &amp;&amp; BypassSCRCommand &amp;&amp; K5_closed )

( etb . dcov &amp;&amp; BypAvailable &amp;&amp; ! BypassACOV ) −−&gt;( BypassSCRCommand &amp;&amp; K5_closed )

https://aaltodoc.aalto.fi/bitstream/handle/123456789/906/isbn9789526031033.pdf?sequence=1
</comment>
		</query>
	</queries>
</nta>
